
simple_calculator_demonstrating_uart_mc1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f90  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001f90  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000015c0  00000000  00000000  0000200c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000009d3  00000000  00000000  000035cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00003f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000040df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000424f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00005e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00006d83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00007b30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00007c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00007f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000086eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 03 07 	call	0xe06	; 0xe06 <main>
      7a:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <KeyPad_getPressedKey+0x6>
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     b40:	1a 82       	std	Y+2, r1	; 0x02
     b42:	4c c0       	rjmp	.+152    	; 0xbdc <KeyPad_getPressedKey+0xa6>
		{
			/*
			 * each time only one of the column pins will be output and
			 * the rest will be input pins include the row pins
			 */
			KEYPAD_PORT_DIR = (0b00010000<<col);
     b44:	ea e3       	ldi	r30, 0x3A	; 58
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	8a 81       	ldd	r24, Y+2	; 0x02
     b4a:	28 2f       	mov	r18, r24
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	80 e1       	ldi	r24, 0x10	; 16
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <KeyPad_getPressedKey+0x22>
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	2a 95       	dec	r18
     b5a:	e2 f7       	brpl	.-8      	; 0xb54 <KeyPad_getPressedKey+0x1e>
     b5c:	80 83       	st	Z, r24

			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
     b5e:	eb e3       	ldi	r30, 0x3B	; 59
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	80 e1       	ldi	r24, 0x10	; 16
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	02 2e       	mov	r0, r18
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <KeyPad_getPressedKey+0x3e>
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	0a 94       	dec	r0
     b76:	e2 f7       	brpl	.-8      	; 0xb70 <KeyPad_getPressedKey+0x3a>
     b78:	80 95       	com	r24
     b7a:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
     b7c:	19 82       	std	Y+1, r1	; 0x01
     b7e:	28 c0       	rjmp	.+80     	; 0xbd0 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */
     b80:	e9 e3       	ldi	r30, 0x39	; 57
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	28 2f       	mov	r18, r24
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a9 01       	movw	r20, r18
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <KeyPad_getPressedKey+0x62>
     b94:	55 95       	asr	r21
     b96:	47 95       	ror	r20
     b98:	8a 95       	dec	r24
     b9a:	e2 f7       	brpl	.-8      	; 0xb94 <KeyPad_getPressedKey+0x5e>
     b9c:	ca 01       	movw	r24, r20
     b9e:	81 70       	andi	r24, 0x01	; 1
     ba0:	90 70       	andi	r25, 0x00	; 0
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	91 f4       	brne	.+36     	; 0xbca <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	88 2f       	mov	r24, r24
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	98 2f       	mov	r25, r24
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	89 0f       	add	r24, r25
     bba:	8f 5f       	subi	r24, 0xFF	; 255
     bbc:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	cf 91       	pop	r28
     bc6:	df 91       	pop	r29
     bc8:	08 95       	ret
			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
			for(row=0;row<N_row;row++) /* loop for rows */
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	8f 5f       	subi	r24, 0xFF	; 255
     bce:	89 83       	std	Y+1, r24	; 0x01
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	84 30       	cpi	r24, 0x04	; 4
     bd4:	a8 f2       	brcs	.-86     	; 0xb80 <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	8f 5f       	subi	r24, 0xFF	; 255
     bda:	8a 83       	std	Y+2, r24	; 0x02
     bdc:	8a 81       	ldd	r24, Y+2	; 0x02
     bde:	84 30       	cpi	r24, 0x04	; 4
     be0:	08 f4       	brcc	.+2      	; 0xbe4 <KeyPad_getPressedKey+0xae>
     be2:	b0 cf       	rjmp	.-160    	; 0xb44 <KeyPad_getPressedKey+0xe>
     be4:	ad cf       	rjmp	.-166    	; 0xb40 <KeyPad_getPressedKey+0xa>

00000be6 <KeyPad_4x4_adjustKeyNumber>:
}

#elif (N_col == 4)

static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
     be6:	df 93       	push	r29
     be8:	cf 93       	push	r28
     bea:	00 d0       	rcall	.+0      	; 0xbec <KeyPad_4x4_adjustKeyNumber+0x6>
     bec:	00 d0       	rcall	.+0      	; 0xbee <KeyPad_4x4_adjustKeyNumber+0x8>
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
     bf2:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	28 2f       	mov	r18, r24
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	3c 83       	std	Y+4, r19	; 0x04
     bfc:	2b 83       	std	Y+3, r18	; 0x03
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	9c 81       	ldd	r25, Y+4	; 0x04
     c02:	88 30       	cpi	r24, 0x08	; 8
     c04:	91 05       	cpc	r25, r1
     c06:	09 f4       	brne	.+2      	; 0xc0a <KeyPad_4x4_adjustKeyNumber+0x24>
     c08:	70 c0       	rjmp	.+224    	; 0xcea <KeyPad_4x4_adjustKeyNumber+0x104>
     c0a:	2b 81       	ldd	r18, Y+3	; 0x03
     c0c:	3c 81       	ldd	r19, Y+4	; 0x04
     c0e:	29 30       	cpi	r18, 0x09	; 9
     c10:	31 05       	cpc	r19, r1
     c12:	5c f5       	brge	.+86     	; 0xc6a <KeyPad_4x4_adjustKeyNumber+0x84>
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	9c 81       	ldd	r25, Y+4	; 0x04
     c18:	84 30       	cpi	r24, 0x04	; 4
     c1a:	91 05       	cpc	r25, r1
     c1c:	09 f4       	brne	.+2      	; 0xc20 <KeyPad_4x4_adjustKeyNumber+0x3a>
     c1e:	59 c0       	rjmp	.+178    	; 0xcd2 <KeyPad_4x4_adjustKeyNumber+0xec>
     c20:	2b 81       	ldd	r18, Y+3	; 0x03
     c22:	3c 81       	ldd	r19, Y+4	; 0x04
     c24:	25 30       	cpi	r18, 0x05	; 5
     c26:	31 05       	cpc	r19, r1
     c28:	9c f4       	brge	.+38     	; 0xc50 <KeyPad_4x4_adjustKeyNumber+0x6a>
     c2a:	8b 81       	ldd	r24, Y+3	; 0x03
     c2c:	9c 81       	ldd	r25, Y+4	; 0x04
     c2e:	82 30       	cpi	r24, 0x02	; 2
     c30:	91 05       	cpc	r25, r1
     c32:	09 f4       	brne	.+2      	; 0xc36 <KeyPad_4x4_adjustKeyNumber+0x50>
     c34:	48 c0       	rjmp	.+144    	; 0xcc6 <KeyPad_4x4_adjustKeyNumber+0xe0>
     c36:	2b 81       	ldd	r18, Y+3	; 0x03
     c38:	3c 81       	ldd	r19, Y+4	; 0x04
     c3a:	23 30       	cpi	r18, 0x03	; 3
     c3c:	31 05       	cpc	r19, r1
     c3e:	0c f0       	brlt	.+2      	; 0xc42 <KeyPad_4x4_adjustKeyNumber+0x5c>
     c40:	45 c0       	rjmp	.+138    	; 0xccc <KeyPad_4x4_adjustKeyNumber+0xe6>
     c42:	8b 81       	ldd	r24, Y+3	; 0x03
     c44:	9c 81       	ldd	r25, Y+4	; 0x04
     c46:	81 30       	cpi	r24, 0x01	; 1
     c48:	91 05       	cpc	r25, r1
     c4a:	09 f4       	brne	.+2      	; 0xc4e <KeyPad_4x4_adjustKeyNumber+0x68>
     c4c:	39 c0       	rjmp	.+114    	; 0xcc0 <KeyPad_4x4_adjustKeyNumber+0xda>
     c4e:	67 c0       	rjmp	.+206    	; 0xd1e <KeyPad_4x4_adjustKeyNumber+0x138>
     c50:	2b 81       	ldd	r18, Y+3	; 0x03
     c52:	3c 81       	ldd	r19, Y+4	; 0x04
     c54:	26 30       	cpi	r18, 0x06	; 6
     c56:	31 05       	cpc	r19, r1
     c58:	09 f4       	brne	.+2      	; 0xc5c <KeyPad_4x4_adjustKeyNumber+0x76>
     c5a:	41 c0       	rjmp	.+130    	; 0xcde <KeyPad_4x4_adjustKeyNumber+0xf8>
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	9c 81       	ldd	r25, Y+4	; 0x04
     c60:	87 30       	cpi	r24, 0x07	; 7
     c62:	91 05       	cpc	r25, r1
     c64:	0c f0       	brlt	.+2      	; 0xc68 <KeyPad_4x4_adjustKeyNumber+0x82>
     c66:	3e c0       	rjmp	.+124    	; 0xce4 <KeyPad_4x4_adjustKeyNumber+0xfe>
     c68:	37 c0       	rjmp	.+110    	; 0xcd8 <KeyPad_4x4_adjustKeyNumber+0xf2>
     c6a:	2b 81       	ldd	r18, Y+3	; 0x03
     c6c:	3c 81       	ldd	r19, Y+4	; 0x04
     c6e:	2c 30       	cpi	r18, 0x0C	; 12
     c70:	31 05       	cpc	r19, r1
     c72:	09 f4       	brne	.+2      	; 0xc76 <KeyPad_4x4_adjustKeyNumber+0x90>
     c74:	46 c0       	rjmp	.+140    	; 0xd02 <KeyPad_4x4_adjustKeyNumber+0x11c>
     c76:	8b 81       	ldd	r24, Y+3	; 0x03
     c78:	9c 81       	ldd	r25, Y+4	; 0x04
     c7a:	8d 30       	cpi	r24, 0x0D	; 13
     c7c:	91 05       	cpc	r25, r1
     c7e:	5c f4       	brge	.+22     	; 0xc96 <KeyPad_4x4_adjustKeyNumber+0xb0>
     c80:	2b 81       	ldd	r18, Y+3	; 0x03
     c82:	3c 81       	ldd	r19, Y+4	; 0x04
     c84:	2a 30       	cpi	r18, 0x0A	; 10
     c86:	31 05       	cpc	r19, r1
     c88:	b1 f1       	breq	.+108    	; 0xcf6 <KeyPad_4x4_adjustKeyNumber+0x110>
     c8a:	8b 81       	ldd	r24, Y+3	; 0x03
     c8c:	9c 81       	ldd	r25, Y+4	; 0x04
     c8e:	8b 30       	cpi	r24, 0x0B	; 11
     c90:	91 05       	cpc	r25, r1
     c92:	a4 f5       	brge	.+104    	; 0xcfc <KeyPad_4x4_adjustKeyNumber+0x116>
     c94:	2d c0       	rjmp	.+90     	; 0xcf0 <KeyPad_4x4_adjustKeyNumber+0x10a>
     c96:	2b 81       	ldd	r18, Y+3	; 0x03
     c98:	3c 81       	ldd	r19, Y+4	; 0x04
     c9a:	2e 30       	cpi	r18, 0x0E	; 14
     c9c:	31 05       	cpc	r19, r1
     c9e:	b9 f1       	breq	.+110    	; 0xd0e <KeyPad_4x4_adjustKeyNumber+0x128>
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	9c 81       	ldd	r25, Y+4	; 0x04
     ca4:	8e 30       	cpi	r24, 0x0E	; 14
     ca6:	91 05       	cpc	r25, r1
     ca8:	7c f1       	brlt	.+94     	; 0xd08 <KeyPad_4x4_adjustKeyNumber+0x122>
     caa:	2b 81       	ldd	r18, Y+3	; 0x03
     cac:	3c 81       	ldd	r19, Y+4	; 0x04
     cae:	2f 30       	cpi	r18, 0x0F	; 15
     cb0:	31 05       	cpc	r19, r1
     cb2:	79 f1       	breq	.+94     	; 0xd12 <KeyPad_4x4_adjustKeyNumber+0x12c>
     cb4:	8b 81       	ldd	r24, Y+3	; 0x03
     cb6:	9c 81       	ldd	r25, Y+4	; 0x04
     cb8:	80 31       	cpi	r24, 0x10	; 16
     cba:	91 05       	cpc	r25, r1
     cbc:	69 f1       	breq	.+90     	; 0xd18 <KeyPad_4x4_adjustKeyNumber+0x132>
     cbe:	2f c0       	rjmp	.+94     	; 0xd1e <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7;
     cc0:	97 e0       	ldi	r25, 0x07	; 7
     cc2:	9a 83       	std	Y+2, r25	; 0x02
     cc4:	2e c0       	rjmp	.+92     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8;
     cc6:	28 e0       	ldi	r18, 0x08	; 8
     cc8:	2a 83       	std	Y+2, r18	; 0x02
     cca:	2b c0       	rjmp	.+86     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9;
     ccc:	39 e0       	ldi	r19, 0x09	; 9
     cce:	3a 83       	std	Y+2, r19	; 0x02
     cd0:	28 c0       	rjmp	.+80     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '/'; // ASCII Code of %
     cd2:	8f e2       	ldi	r24, 0x2F	; 47
     cd4:	8a 83       	std	Y+2, r24	; 0x02
     cd6:	25 c0       	rjmp	.+74     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4;
     cd8:	94 e0       	ldi	r25, 0x04	; 4
     cda:	9a 83       	std	Y+2, r25	; 0x02
     cdc:	22 c0       	rjmp	.+68     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
     cde:	25 e0       	ldi	r18, 0x05	; 5
     ce0:	2a 83       	std	Y+2, r18	; 0x02
     ce2:	1f c0       	rjmp	.+62     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6;
     ce4:	36 e0       	ldi	r19, 0x06	; 6
     ce6:	3a 83       	std	Y+2, r19	; 0x02
     ce8:	1c c0       	rjmp	.+56     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
     cea:	8a e2       	ldi	r24, 0x2A	; 42
     cec:	8a 83       	std	Y+2, r24	; 0x02
     cee:	19 c0       	rjmp	.+50     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 9: return 1;
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	9a 83       	std	Y+2, r25	; 0x02
     cf4:	16 c0       	rjmp	.+44     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2;
     cf6:	22 e0       	ldi	r18, 0x02	; 2
     cf8:	2a 83       	std	Y+2, r18	; 0x02
     cfa:	13 c0       	rjmp	.+38     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3;
     cfc:	33 e0       	ldi	r19, 0x03	; 3
     cfe:	3a 83       	std	Y+2, r19	; 0x02
     d00:	10 c0       	rjmp	.+32     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
     d02:	8d e2       	ldi	r24, 0x2D	; 45
     d04:	8a 83       	std	Y+2, r24	; 0x02
     d06:	0d c0       	rjmp	.+26     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
     d08:	9d e0       	ldi	r25, 0x0D	; 13
     d0a:	9a 83       	std	Y+2, r25	; 0x02
     d0c:	0a c0       	rjmp	.+20     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 14: return 0;
     d0e:	1a 82       	std	Y+2, r1	; 0x02
     d10:	08 c0       	rjmp	.+16     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
     d12:	2d e3       	ldi	r18, 0x3D	; 61
     d14:	2a 83       	std	Y+2, r18	; 0x02
     d16:	05 c0       	rjmp	.+10     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
     d18:	3b e2       	ldi	r19, 0x2B	; 43
     d1a:	3a 83       	std	Y+2, r19	; 0x02
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	8a 83       	std	Y+2, r24	; 0x02
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	08 95       	ret

00000d32 <calculate_result>:

#include "keypad.h"
#include "uart.h"
// This is a rudimentary calculator that does operations on numbers of max value = 255

sint16 calculate_result(uint8 lhs, uint8 op, uint8 rhs){
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	27 97       	sbiw	r28, 0x07	; 7
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	8b 83       	std	Y+3, r24	; 0x03
     d48:	6c 83       	std	Y+4, r22	; 0x04
     d4a:	4d 83       	std	Y+5, r20	; 0x05
	sint16 result;
	switch(op){
     d4c:	8c 81       	ldd	r24, Y+4	; 0x04
     d4e:	28 2f       	mov	r18, r24
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	3f 83       	std	Y+7, r19	; 0x07
     d54:	2e 83       	std	Y+6, r18	; 0x06
     d56:	4e 81       	ldd	r20, Y+6	; 0x06
     d58:	5f 81       	ldd	r21, Y+7	; 0x07
     d5a:	4b 32       	cpi	r20, 0x2B	; 43
     d5c:	51 05       	cpc	r21, r1
     d5e:	b1 f0       	breq	.+44     	; 0xd8c <calculate_result+0x5a>
     d60:	8e 81       	ldd	r24, Y+6	; 0x06
     d62:	9f 81       	ldd	r25, Y+7	; 0x07
     d64:	8c 32       	cpi	r24, 0x2C	; 44
     d66:	91 05       	cpc	r25, r1
     d68:	34 f4       	brge	.+12     	; 0xd76 <calculate_result+0x44>
     d6a:	2e 81       	ldd	r18, Y+6	; 0x06
     d6c:	3f 81       	ldd	r19, Y+7	; 0x07
     d6e:	2a 32       	cpi	r18, 0x2A	; 42
     d70:	31 05       	cpc	r19, r1
     d72:	71 f1       	breq	.+92     	; 0xdd0 <calculate_result+0x9e>
     d74:	3d c0       	rjmp	.+122    	; 0xdf0 <calculate_result+0xbe>
     d76:	4e 81       	ldd	r20, Y+6	; 0x06
     d78:	5f 81       	ldd	r21, Y+7	; 0x07
     d7a:	4d 32       	cpi	r20, 0x2D	; 45
     d7c:	51 05       	cpc	r21, r1
     d7e:	d9 f0       	breq	.+54     	; 0xdb6 <calculate_result+0x84>
     d80:	8e 81       	ldd	r24, Y+6	; 0x06
     d82:	9f 81       	ldd	r25, Y+7	; 0x07
     d84:	8f 32       	cpi	r24, 0x2F	; 47
     d86:	91 05       	cpc	r25, r1
     d88:	61 f0       	breq	.+24     	; 0xda2 <calculate_result+0x70>
     d8a:	32 c0       	rjmp	.+100    	; 0xdf0 <calculate_result+0xbe>
	case '+':
		result = (lhs + rhs);
     d8c:	8b 81       	ldd	r24, Y+3	; 0x03
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	8d 81       	ldd	r24, Y+5	; 0x05
     d94:	88 2f       	mov	r24, r24
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	82 0f       	add	r24, r18
     d9a:	93 1f       	adc	r25, r19
     d9c:	9a 83       	std	Y+2, r25	; 0x02
     d9e:	89 83       	std	Y+1, r24	; 0x01
     da0:	27 c0       	rjmp	.+78     	; 0xdf0 <calculate_result+0xbe>
		break;
	case '/':
		result = (lhs/rhs);
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	9d 81       	ldd	r25, Y+5	; 0x05
     da6:	69 2f       	mov	r22, r25
     da8:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__udivmodqi4>
     dac:	88 2f       	mov	r24, r24
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	9a 83       	std	Y+2, r25	; 0x02
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	1d c0       	rjmp	.+58     	; 0xdf0 <calculate_result+0xbe>
		break;
	case '-':
		result = (lhs-rhs);
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	8d 81       	ldd	r24, Y+5	; 0x05
     dbe:	88 2f       	mov	r24, r24
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	a9 01       	movw	r20, r18
     dc4:	48 1b       	sub	r20, r24
     dc6:	59 0b       	sbc	r21, r25
     dc8:	ca 01       	movw	r24, r20
     dca:	9a 83       	std	Y+2, r25	; 0x02
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	10 c0       	rjmp	.+32     	; 0xdf0 <calculate_result+0xbe>
		break;
	case '*':
		result = (rhs*lhs);
     dd0:	8d 81       	ldd	r24, Y+5	; 0x05
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	88 2f       	mov	r24, r24
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	ac 01       	movw	r20, r24
     dde:	24 9f       	mul	r18, r20
     de0:	c0 01       	movw	r24, r0
     de2:	25 9f       	mul	r18, r21
     de4:	90 0d       	add	r25, r0
     de6:	34 9f       	mul	r19, r20
     de8:	90 0d       	add	r25, r0
     dea:	11 24       	eor	r1, r1
     dec:	9a 83       	std	Y+2, r25	; 0x02
     dee:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return result;
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	9a 81       	ldd	r25, Y+2	; 0x02
}
     df4:	27 96       	adiw	r28, 0x07	; 7
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	cf 91       	pop	r28
     e02:	df 91       	pop	r29
     e04:	08 95       	ret

00000e06 <main>:
int main(void)
{
     e06:	0f 93       	push	r16
     e08:	1f 93       	push	r17
     e0a:	df 93       	push	r29
     e0c:	cf 93       	push	r28
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	cf 59       	subi	r28, 0x9F	; 159
     e14:	d0 40       	sbci	r29, 0x00	; 0
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
	uint8 lhs = 0; /*           0 .. 255             */
     e20:	fe 01       	movw	r30, r28
     e22:	e1 56       	subi	r30, 0x61	; 97
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	10 82       	st	Z, r1
	uint8 rhs = 0; /*           0 .. 255             */
     e28:	fe 01       	movw	r30, r28
     e2a:	e2 56       	subi	r30, 0x62	; 98
     e2c:	ff 4f       	sbci	r31, 0xFF	; 255
     e2e:	10 82       	st	Z, r1
	uint8 op = 0;
     e30:	fe 01       	movw	r30, r28
     e32:	e3 56       	subi	r30, 0x63	; 99
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	10 82       	st	Z, r1
	uint8 eq = 0;
     e38:	fe 01       	movw	r30, r28
     e3a:	e4 56       	subi	r30, 0x64	; 100
     e3c:	ff 4f       	sbci	r31, 0xFF	; 255
     e3e:	10 82       	st	Z, r1
	sint16 result = 0;/*      -32768 .. +32767          */
     e40:	fe 01       	movw	r30, r28
     e42:	e6 56       	subi	r30, 0x66	; 102
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	11 82       	std	Z+1, r1	; 0x01
     e48:	10 82       	st	Z, r1
	UART_init();
     e4a:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <UART_init>
    while(1)
    {
    	for(int i =0; i<4; i++){//get lhs
     e4e:	fe 01       	movw	r30, r28
     e50:	ec 56       	subi	r30, 0x6C	; 108
     e52:	ff 4f       	sbci	r31, 0xFF	; 255
     e54:	11 82       	std	Z+1, r1	; 0x01
     e56:	10 82       	st	Z, r1
     e58:	9f c2       	rjmp	.+1342   	; 0x1398 <main+0x592>
    		uint8 key = KeyPad_getPressedKey(); //get the pressed key
     e5a:	0e 94 9b 05 	call	0xb36	; 0xb36 <KeyPad_getPressedKey>
     e5e:	fe 01       	movw	r30, r28
     e60:	ed 56       	subi	r30, 0x6D	; 109
     e62:	ff 4f       	sbci	r31, 0xFF	; 255
     e64:	80 83       	st	Z, r24
    		if(key == 13){//clear screen
     e66:	fe 01       	movw	r30, r28
     e68:	ed 56       	subi	r30, 0x6D	; 109
     e6a:	ff 4f       	sbci	r31, 0xFF	; 255
     e6c:	80 81       	ld	r24, Z
     e6e:	8d 30       	cpi	r24, 0x0D	; 13
     e70:	09 f0       	breq	.+2      	; 0xe74 <main+0x6e>
     e72:	d0 c0       	rjmp	.+416    	; 0x1014 <main+0x20e>
    			UART_sendByte(key);
     e74:	fe 01       	movw	r30, r28
     e76:	ed 56       	subi	r30, 0x6D	; 109
     e78:	ff 4f       	sbci	r31, 0xFF	; 255
     e7a:	80 81       	ld	r24, Z
     e7c:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <UART_sendByte>
     e80:	fe 01       	movw	r30, r28
     e82:	e7 57       	subi	r30, 0x77	; 119
     e84:	ff 4f       	sbci	r31, 0xFF	; 255
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	aa ef       	ldi	r26, 0xFA	; 250
     e8c:	b3 e4       	ldi	r27, 0x43	; 67
     e8e:	80 83       	st	Z, r24
     e90:	91 83       	std	Z+1, r25	; 0x01
     e92:	a2 83       	std	Z+2, r26	; 0x02
     e94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e96:	8e 01       	movw	r16, r28
     e98:	0b 57       	subi	r16, 0x7B	; 123
     e9a:	1f 4f       	sbci	r17, 0xFF	; 255
     e9c:	fe 01       	movw	r30, r28
     e9e:	e7 57       	subi	r30, 0x77	; 119
     ea0:	ff 4f       	sbci	r31, 0xFF	; 255
     ea2:	60 81       	ld	r22, Z
     ea4:	71 81       	ldd	r23, Z+1	; 0x01
     ea6:	82 81       	ldd	r24, Z+2	; 0x02
     ea8:	93 81       	ldd	r25, Z+3	; 0x03
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	4a e7       	ldi	r20, 0x7A	; 122
     eb0:	53 e4       	ldi	r21, 0x43	; 67
     eb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	f8 01       	movw	r30, r16
     ebc:	80 83       	st	Z, r24
     ebe:	91 83       	std	Z+1, r25	; 0x01
     ec0:	a2 83       	std	Z+2, r26	; 0x02
     ec2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ec4:	fe 01       	movw	r30, r28
     ec6:	eb 57       	subi	r30, 0x7B	; 123
     ec8:	ff 4f       	sbci	r31, 0xFF	; 255
     eca:	60 81       	ld	r22, Z
     ecc:	71 81       	ldd	r23, Z+1	; 0x01
     ece:	82 81       	ldd	r24, Z+2	; 0x02
     ed0:	93 81       	ldd	r25, Z+3	; 0x03
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e8       	ldi	r20, 0x80	; 128
     ed8:	5f e3       	ldi	r21, 0x3F	; 63
     eda:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ede:	88 23       	and	r24, r24
     ee0:	44 f4       	brge	.+16     	; 0xef2 <main+0xec>
		__ticks = 1;
     ee2:	fe 01       	movw	r30, r28
     ee4:	ed 57       	subi	r30, 0x7D	; 125
     ee6:	ff 4f       	sbci	r31, 0xFF	; 255
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	91 83       	std	Z+1, r25	; 0x01
     eee:	80 83       	st	Z, r24
     ef0:	64 c0       	rjmp	.+200    	; 0xfba <main+0x1b4>
	else if (__tmp > 65535)
     ef2:	fe 01       	movw	r30, r28
     ef4:	eb 57       	subi	r30, 0x7B	; 123
     ef6:	ff 4f       	sbci	r31, 0xFF	; 255
     ef8:	60 81       	ld	r22, Z
     efa:	71 81       	ldd	r23, Z+1	; 0x01
     efc:	82 81       	ldd	r24, Z+2	; 0x02
     efe:	93 81       	ldd	r25, Z+3	; 0x03
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	3f ef       	ldi	r19, 0xFF	; 255
     f04:	4f e7       	ldi	r20, 0x7F	; 127
     f06:	57 e4       	ldi	r21, 0x47	; 71
     f08:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f0c:	18 16       	cp	r1, r24
     f0e:	0c f0       	brlt	.+2      	; 0xf12 <main+0x10c>
     f10:	43 c0       	rjmp	.+134    	; 0xf98 <main+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f12:	fe 01       	movw	r30, r28
     f14:	e7 57       	subi	r30, 0x77	; 119
     f16:	ff 4f       	sbci	r31, 0xFF	; 255
     f18:	60 81       	ld	r22, Z
     f1a:	71 81       	ldd	r23, Z+1	; 0x01
     f1c:	82 81       	ldd	r24, Z+2	; 0x02
     f1e:	93 81       	ldd	r25, Z+3	; 0x03
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	40 e2       	ldi	r20, 0x20	; 32
     f26:	51 e4       	ldi	r21, 0x41	; 65
     f28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f2c:	dc 01       	movw	r26, r24
     f2e:	cb 01       	movw	r24, r22
     f30:	8e 01       	movw	r16, r28
     f32:	0d 57       	subi	r16, 0x7D	; 125
     f34:	1f 4f       	sbci	r17, 0xFF	; 255
     f36:	bc 01       	movw	r22, r24
     f38:	cd 01       	movw	r24, r26
     f3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	f8 01       	movw	r30, r16
     f44:	91 83       	std	Z+1, r25	; 0x01
     f46:	80 83       	st	Z, r24
     f48:	1f c0       	rjmp	.+62     	; 0xf88 <main+0x182>
     f4a:	fe 01       	movw	r30, r28
     f4c:	ef 57       	subi	r30, 0x7F	; 127
     f4e:	ff 4f       	sbci	r31, 0xFF	; 255
     f50:	89 e1       	ldi	r24, 0x19	; 25
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	91 83       	std	Z+1, r25	; 0x01
     f56:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f58:	fe 01       	movw	r30, r28
     f5a:	ef 57       	subi	r30, 0x7F	; 127
     f5c:	ff 4f       	sbci	r31, 0xFF	; 255
     f5e:	80 81       	ld	r24, Z
     f60:	91 81       	ldd	r25, Z+1	; 0x01
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	f1 f7       	brne	.-4      	; 0xf62 <main+0x15c>
     f66:	fe 01       	movw	r30, r28
     f68:	ef 57       	subi	r30, 0x7F	; 127
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	91 83       	std	Z+1, r25	; 0x01
     f6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f70:	de 01       	movw	r26, r28
     f72:	ad 57       	subi	r26, 0x7D	; 125
     f74:	bf 4f       	sbci	r27, 0xFF	; 255
     f76:	fe 01       	movw	r30, r28
     f78:	ed 57       	subi	r30, 0x7D	; 125
     f7a:	ff 4f       	sbci	r31, 0xFF	; 255
     f7c:	80 81       	ld	r24, Z
     f7e:	91 81       	ldd	r25, Z+1	; 0x01
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	11 96       	adiw	r26, 0x01	; 1
     f84:	9c 93       	st	X, r25
     f86:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f88:	fe 01       	movw	r30, r28
     f8a:	ed 57       	subi	r30, 0x7D	; 125
     f8c:	ff 4f       	sbci	r31, 0xFF	; 255
     f8e:	80 81       	ld	r24, Z
     f90:	91 81       	ldd	r25, Z+1	; 0x01
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	d1 f6       	brne	.-76     	; 0xf4a <main+0x144>
     f96:	28 c0       	rjmp	.+80     	; 0xfe8 <main+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f98:	8e 01       	movw	r16, r28
     f9a:	0d 57       	subi	r16, 0x7D	; 125
     f9c:	1f 4f       	sbci	r17, 0xFF	; 255
     f9e:	fe 01       	movw	r30, r28
     fa0:	eb 57       	subi	r30, 0x7B	; 123
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
     fa4:	60 81       	ld	r22, Z
     fa6:	71 81       	ldd	r23, Z+1	; 0x01
     fa8:	82 81       	ldd	r24, Z+2	; 0x02
     faa:	93 81       	ldd	r25, Z+3	; 0x03
     fac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	f8 01       	movw	r30, r16
     fb6:	91 83       	std	Z+1, r25	; 0x01
     fb8:	80 83       	st	Z, r24
     fba:	de 01       	movw	r26, r28
     fbc:	a1 58       	subi	r26, 0x81	; 129
     fbe:	bf 4f       	sbci	r27, 0xFF	; 255
     fc0:	fe 01       	movw	r30, r28
     fc2:	ed 57       	subi	r30, 0x7D	; 125
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	80 81       	ld	r24, Z
     fc8:	91 81       	ldd	r25, Z+1	; 0x01
     fca:	11 96       	adiw	r26, 0x01	; 1
     fcc:	9c 93       	st	X, r25
     fce:	8e 93       	st	-X, r24
     fd0:	fe 01       	movw	r30, r28
     fd2:	e1 58       	subi	r30, 0x81	; 129
     fd4:	ff 4f       	sbci	r31, 0xFF	; 255
     fd6:	80 81       	ld	r24, Z
     fd8:	91 81       	ldd	r25, Z+1	; 0x01
     fda:	01 97       	sbiw	r24, 0x01	; 1
     fdc:	f1 f7       	brne	.-4      	; 0xfda <main+0x1d4>
     fde:	fe 01       	movw	r30, r28
     fe0:	e1 58       	subi	r30, 0x81	; 129
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	91 83       	std	Z+1, r25	; 0x01
     fe6:	80 83       	st	Z, r24
    			_delay_ms(500);
    			lhs = 0;
     fe8:	fe 01       	movw	r30, r28
     fea:	e1 56       	subi	r30, 0x61	; 97
     fec:	ff 4f       	sbci	r31, 0xFF	; 255
     fee:	10 82       	st	Z, r1
    			rhs = 0;
     ff0:	fe 01       	movw	r30, r28
     ff2:	e2 56       	subi	r30, 0x62	; 98
     ff4:	ff 4f       	sbci	r31, 0xFF	; 255
     ff6:	10 82       	st	Z, r1
    			op = 0;
     ff8:	fe 01       	movw	r30, r28
     ffa:	e3 56       	subi	r30, 0x63	; 99
     ffc:	ff 4f       	sbci	r31, 0xFF	; 255
     ffe:	10 82       	st	Z, r1
    			eq = 0;
    1000:	fe 01       	movw	r30, r28
    1002:	e4 56       	subi	r30, 0x64	; 100
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	10 82       	st	Z, r1
    			result = 0;
    1008:	fe 01       	movw	r30, r28
    100a:	e6 56       	subi	r30, 0x66	; 102
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	11 82       	std	Z+1, r1	; 0x01
    1010:	10 82       	st	Z, r1
    1012:	cb c1       	rjmp	.+918    	; 0x13aa <main+0x5a4>
    			break;
    		}else if((key == '*') || (key == '/') || (key == '-') || (key == '+') ){
    1014:	fe 01       	movw	r30, r28
    1016:	ed 56       	subi	r30, 0x6D	; 109
    1018:	ff 4f       	sbci	r31, 0xFF	; 255
    101a:	80 81       	ld	r24, Z
    101c:	8a 32       	cpi	r24, 0x2A	; 42
    101e:	99 f0       	breq	.+38     	; 0x1046 <main+0x240>
    1020:	fe 01       	movw	r30, r28
    1022:	ed 56       	subi	r30, 0x6D	; 109
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	80 81       	ld	r24, Z
    1028:	8f 32       	cpi	r24, 0x2F	; 47
    102a:	69 f0       	breq	.+26     	; 0x1046 <main+0x240>
    102c:	fe 01       	movw	r30, r28
    102e:	ed 56       	subi	r30, 0x6D	; 109
    1030:	ff 4f       	sbci	r31, 0xFF	; 255
    1032:	80 81       	ld	r24, Z
    1034:	8d 32       	cpi	r24, 0x2D	; 45
    1036:	39 f0       	breq	.+14     	; 0x1046 <main+0x240>
    1038:	fe 01       	movw	r30, r28
    103a:	ed 56       	subi	r30, 0x6D	; 109
    103c:	ff 4f       	sbci	r31, 0xFF	; 255
    103e:	80 81       	ld	r24, Z
    1040:	8b 32       	cpi	r24, 0x2B	; 43
    1042:	09 f0       	breq	.+2      	; 0x1046 <main+0x240>
    1044:	c3 c0       	rjmp	.+390    	; 0x11cc <main+0x3c6>
    			op = key;
    1046:	de 01       	movw	r26, r28
    1048:	a3 56       	subi	r26, 0x63	; 99
    104a:	bf 4f       	sbci	r27, 0xFF	; 255
    104c:	fe 01       	movw	r30, r28
    104e:	ed 56       	subi	r30, 0x6D	; 109
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	80 81       	ld	r24, Z
    1054:	8c 93       	st	X, r24
    	       	UART_sendByte(op);
    1056:	fe 01       	movw	r30, r28
    1058:	e3 56       	subi	r30, 0x63	; 99
    105a:	ff 4f       	sbci	r31, 0xFF	; 255
    105c:	80 81       	ld	r24, Z
    105e:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <UART_sendByte>
    1062:	fe 01       	movw	r30, r28
    1064:	e5 58       	subi	r30, 0x85	; 133
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	aa ef       	ldi	r26, 0xFA	; 250
    106e:	b3 e4       	ldi	r27, 0x43	; 67
    1070:	80 83       	st	Z, r24
    1072:	91 83       	std	Z+1, r25	; 0x01
    1074:	a2 83       	std	Z+2, r26	; 0x02
    1076:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1078:	8e 01       	movw	r16, r28
    107a:	09 58       	subi	r16, 0x89	; 137
    107c:	1f 4f       	sbci	r17, 0xFF	; 255
    107e:	fe 01       	movw	r30, r28
    1080:	e5 58       	subi	r30, 0x85	; 133
    1082:	ff 4f       	sbci	r31, 0xFF	; 255
    1084:	60 81       	ld	r22, Z
    1086:	71 81       	ldd	r23, Z+1	; 0x01
    1088:	82 81       	ldd	r24, Z+2	; 0x02
    108a:	93 81       	ldd	r25, Z+3	; 0x03
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	4a e7       	ldi	r20, 0x7A	; 122
    1092:	53 e4       	ldi	r21, 0x43	; 67
    1094:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	f8 01       	movw	r30, r16
    109e:	80 83       	st	Z, r24
    10a0:	91 83       	std	Z+1, r25	; 0x01
    10a2:	a2 83       	std	Z+2, r26	; 0x02
    10a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10a6:	fe 01       	movw	r30, r28
    10a8:	e9 58       	subi	r30, 0x89	; 137
    10aa:	ff 4f       	sbci	r31, 0xFF	; 255
    10ac:	60 81       	ld	r22, Z
    10ae:	71 81       	ldd	r23, Z+1	; 0x01
    10b0:	82 81       	ldd	r24, Z+2	; 0x02
    10b2:	93 81       	ldd	r25, Z+3	; 0x03
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	40 e8       	ldi	r20, 0x80	; 128
    10ba:	5f e3       	ldi	r21, 0x3F	; 63
    10bc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10c0:	88 23       	and	r24, r24
    10c2:	44 f4       	brge	.+16     	; 0x10d4 <main+0x2ce>
		__ticks = 1;
    10c4:	fe 01       	movw	r30, r28
    10c6:	eb 58       	subi	r30, 0x8B	; 139
    10c8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	91 83       	std	Z+1, r25	; 0x01
    10d0:	80 83       	st	Z, r24
    10d2:	64 c0       	rjmp	.+200    	; 0x119c <main+0x396>
	else if (__tmp > 65535)
    10d4:	fe 01       	movw	r30, r28
    10d6:	e9 58       	subi	r30, 0x89	; 137
    10d8:	ff 4f       	sbci	r31, 0xFF	; 255
    10da:	60 81       	ld	r22, Z
    10dc:	71 81       	ldd	r23, Z+1	; 0x01
    10de:	82 81       	ldd	r24, Z+2	; 0x02
    10e0:	93 81       	ldd	r25, Z+3	; 0x03
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	3f ef       	ldi	r19, 0xFF	; 255
    10e6:	4f e7       	ldi	r20, 0x7F	; 127
    10e8:	57 e4       	ldi	r21, 0x47	; 71
    10ea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    10ee:	18 16       	cp	r1, r24
    10f0:	0c f0       	brlt	.+2      	; 0x10f4 <main+0x2ee>
    10f2:	43 c0       	rjmp	.+134    	; 0x117a <main+0x374>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f4:	fe 01       	movw	r30, r28
    10f6:	e5 58       	subi	r30, 0x85	; 133
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	60 81       	ld	r22, Z
    10fc:	71 81       	ldd	r23, Z+1	; 0x01
    10fe:	82 81       	ldd	r24, Z+2	; 0x02
    1100:	93 81       	ldd	r25, Z+3	; 0x03
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e2       	ldi	r20, 0x20	; 32
    1108:	51 e4       	ldi	r21, 0x41	; 65
    110a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	8e 01       	movw	r16, r28
    1114:	0b 58       	subi	r16, 0x8B	; 139
    1116:	1f 4f       	sbci	r17, 0xFF	; 255
    1118:	bc 01       	movw	r22, r24
    111a:	cd 01       	movw	r24, r26
    111c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	f8 01       	movw	r30, r16
    1126:	91 83       	std	Z+1, r25	; 0x01
    1128:	80 83       	st	Z, r24
    112a:	1f c0       	rjmp	.+62     	; 0x116a <main+0x364>
    112c:	fe 01       	movw	r30, r28
    112e:	ed 58       	subi	r30, 0x8D	; 141
    1130:	ff 4f       	sbci	r31, 0xFF	; 255
    1132:	89 e1       	ldi	r24, 0x19	; 25
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	91 83       	std	Z+1, r25	; 0x01
    1138:	80 83       	st	Z, r24
    113a:	fe 01       	movw	r30, r28
    113c:	ed 58       	subi	r30, 0x8D	; 141
    113e:	ff 4f       	sbci	r31, 0xFF	; 255
    1140:	80 81       	ld	r24, Z
    1142:	91 81       	ldd	r25, Z+1	; 0x01
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	f1 f7       	brne	.-4      	; 0x1144 <main+0x33e>
    1148:	fe 01       	movw	r30, r28
    114a:	ed 58       	subi	r30, 0x8D	; 141
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	91 83       	std	Z+1, r25	; 0x01
    1150:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1152:	de 01       	movw	r26, r28
    1154:	ab 58       	subi	r26, 0x8B	; 139
    1156:	bf 4f       	sbci	r27, 0xFF	; 255
    1158:	fe 01       	movw	r30, r28
    115a:	eb 58       	subi	r30, 0x8B	; 139
    115c:	ff 4f       	sbci	r31, 0xFF	; 255
    115e:	80 81       	ld	r24, Z
    1160:	91 81       	ldd	r25, Z+1	; 0x01
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	11 96       	adiw	r26, 0x01	; 1
    1166:	9c 93       	st	X, r25
    1168:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    116a:	fe 01       	movw	r30, r28
    116c:	eb 58       	subi	r30, 0x8B	; 139
    116e:	ff 4f       	sbci	r31, 0xFF	; 255
    1170:	80 81       	ld	r24, Z
    1172:	91 81       	ldd	r25, Z+1	; 0x01
    1174:	00 97       	sbiw	r24, 0x00	; 0
    1176:	d1 f6       	brne	.-76     	; 0x112c <main+0x326>
    1178:	18 c1       	rjmp	.+560    	; 0x13aa <main+0x5a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    117a:	8e 01       	movw	r16, r28
    117c:	0b 58       	subi	r16, 0x8B	; 139
    117e:	1f 4f       	sbci	r17, 0xFF	; 255
    1180:	fe 01       	movw	r30, r28
    1182:	e9 58       	subi	r30, 0x89	; 137
    1184:	ff 4f       	sbci	r31, 0xFF	; 255
    1186:	60 81       	ld	r22, Z
    1188:	71 81       	ldd	r23, Z+1	; 0x01
    118a:	82 81       	ldd	r24, Z+2	; 0x02
    118c:	93 81       	ldd	r25, Z+3	; 0x03
    118e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	f8 01       	movw	r30, r16
    1198:	91 83       	std	Z+1, r25	; 0x01
    119a:	80 83       	st	Z, r24
    119c:	de 01       	movw	r26, r28
    119e:	af 58       	subi	r26, 0x8F	; 143
    11a0:	bf 4f       	sbci	r27, 0xFF	; 255
    11a2:	fe 01       	movw	r30, r28
    11a4:	eb 58       	subi	r30, 0x8B	; 139
    11a6:	ff 4f       	sbci	r31, 0xFF	; 255
    11a8:	80 81       	ld	r24, Z
    11aa:	91 81       	ldd	r25, Z+1	; 0x01
    11ac:	11 96       	adiw	r26, 0x01	; 1
    11ae:	9c 93       	st	X, r25
    11b0:	8e 93       	st	-X, r24
    11b2:	fe 01       	movw	r30, r28
    11b4:	ef 58       	subi	r30, 0x8F	; 143
    11b6:	ff 4f       	sbci	r31, 0xFF	; 255
    11b8:	80 81       	ld	r24, Z
    11ba:	91 81       	ldd	r25, Z+1	; 0x01
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	f1 f7       	brne	.-4      	; 0x11bc <main+0x3b6>
    11c0:	fe 01       	movw	r30, r28
    11c2:	ef 58       	subi	r30, 0x8F	; 143
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	91 83       	std	Z+1, r25	; 0x01
    11c8:	80 83       	st	Z, r24
    11ca:	ef c0       	rjmp	.+478    	; 0x13aa <main+0x5a4>
    	        _delay_ms(500);
    			break;
    		}else if((key >=0) && (key <=9)){
    11cc:	fe 01       	movw	r30, r28
    11ce:	ed 56       	subi	r30, 0x6D	; 109
    11d0:	ff 4f       	sbci	r31, 0xFF	; 255
    11d2:	80 81       	ld	r24, Z
    11d4:	8a 30       	cpi	r24, 0x0A	; 10
    11d6:	08 f0       	brcs	.+2      	; 0x11da <main+0x3d4>
    11d8:	d3 c0       	rjmp	.+422    	; 0x1380 <main+0x57a>
    			lhs = (lhs*10) + key;
    11da:	fe 01       	movw	r30, r28
    11dc:	e1 56       	subi	r30, 0x61	; 97
    11de:	ff 4f       	sbci	r31, 0xFF	; 255
    11e0:	80 81       	ld	r24, Z
    11e2:	88 2f       	mov	r24, r24
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	9c 01       	movw	r18, r24
    11e8:	22 0f       	add	r18, r18
    11ea:	33 1f       	adc	r19, r19
    11ec:	c9 01       	movw	r24, r18
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	82 0f       	add	r24, r18
    11f8:	93 1f       	adc	r25, r19
    11fa:	98 2f       	mov	r25, r24
    11fc:	de 01       	movw	r26, r28
    11fe:	a1 56       	subi	r26, 0x61	; 97
    1200:	bf 4f       	sbci	r27, 0xFF	; 255
    1202:	fe 01       	movw	r30, r28
    1204:	ed 56       	subi	r30, 0x6D	; 109
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	80 81       	ld	r24, Z
    120a:	89 0f       	add	r24, r25
    120c:	8c 93       	st	X, r24
    		   	UART_sendByte(key);
    120e:	fe 01       	movw	r30, r28
    1210:	ed 56       	subi	r30, 0x6D	; 109
    1212:	ff 4f       	sbci	r31, 0xFF	; 255
    1214:	80 81       	ld	r24, Z
    1216:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <UART_sendByte>
    121a:	fe 01       	movw	r30, r28
    121c:	e3 59       	subi	r30, 0x93	; 147
    121e:	ff 4f       	sbci	r31, 0xFF	; 255
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	aa ef       	ldi	r26, 0xFA	; 250
    1226:	b3 e4       	ldi	r27, 0x43	; 67
    1228:	80 83       	st	Z, r24
    122a:	91 83       	std	Z+1, r25	; 0x01
    122c:	a2 83       	std	Z+2, r26	; 0x02
    122e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1230:	8e 01       	movw	r16, r28
    1232:	07 59       	subi	r16, 0x97	; 151
    1234:	1f 4f       	sbci	r17, 0xFF	; 255
    1236:	fe 01       	movw	r30, r28
    1238:	e3 59       	subi	r30, 0x93	; 147
    123a:	ff 4f       	sbci	r31, 0xFF	; 255
    123c:	60 81       	ld	r22, Z
    123e:	71 81       	ldd	r23, Z+1	; 0x01
    1240:	82 81       	ldd	r24, Z+2	; 0x02
    1242:	93 81       	ldd	r25, Z+3	; 0x03
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	4a e7       	ldi	r20, 0x7A	; 122
    124a:	53 e4       	ldi	r21, 0x43	; 67
    124c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	f8 01       	movw	r30, r16
    1256:	80 83       	st	Z, r24
    1258:	91 83       	std	Z+1, r25	; 0x01
    125a:	a2 83       	std	Z+2, r26	; 0x02
    125c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    125e:	fe 01       	movw	r30, r28
    1260:	e7 59       	subi	r30, 0x97	; 151
    1262:	ff 4f       	sbci	r31, 0xFF	; 255
    1264:	60 81       	ld	r22, Z
    1266:	71 81       	ldd	r23, Z+1	; 0x01
    1268:	82 81       	ldd	r24, Z+2	; 0x02
    126a:	93 81       	ldd	r25, Z+3	; 0x03
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	5f e3       	ldi	r21, 0x3F	; 63
    1274:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1278:	88 23       	and	r24, r24
    127a:	44 f4       	brge	.+16     	; 0x128c <main+0x486>
		__ticks = 1;
    127c:	fe 01       	movw	r30, r28
    127e:	e9 59       	subi	r30, 0x99	; 153
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	91 83       	std	Z+1, r25	; 0x01
    1288:	80 83       	st	Z, r24
    128a:	64 c0       	rjmp	.+200    	; 0x1354 <main+0x54e>
	else if (__tmp > 65535)
    128c:	fe 01       	movw	r30, r28
    128e:	e7 59       	subi	r30, 0x97	; 151
    1290:	ff 4f       	sbci	r31, 0xFF	; 255
    1292:	60 81       	ld	r22, Z
    1294:	71 81       	ldd	r23, Z+1	; 0x01
    1296:	82 81       	ldd	r24, Z+2	; 0x02
    1298:	93 81       	ldd	r25, Z+3	; 0x03
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	3f ef       	ldi	r19, 0xFF	; 255
    129e:	4f e7       	ldi	r20, 0x7F	; 127
    12a0:	57 e4       	ldi	r21, 0x47	; 71
    12a2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12a6:	18 16       	cp	r1, r24
    12a8:	0c f0       	brlt	.+2      	; 0x12ac <main+0x4a6>
    12aa:	43 c0       	rjmp	.+134    	; 0x1332 <main+0x52c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ac:	fe 01       	movw	r30, r28
    12ae:	e3 59       	subi	r30, 0x93	; 147
    12b0:	ff 4f       	sbci	r31, 0xFF	; 255
    12b2:	60 81       	ld	r22, Z
    12b4:	71 81       	ldd	r23, Z+1	; 0x01
    12b6:	82 81       	ldd	r24, Z+2	; 0x02
    12b8:	93 81       	ldd	r25, Z+3	; 0x03
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e2       	ldi	r20, 0x20	; 32
    12c0:	51 e4       	ldi	r21, 0x41	; 65
    12c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	8e 01       	movw	r16, r28
    12cc:	09 59       	subi	r16, 0x99	; 153
    12ce:	1f 4f       	sbci	r17, 0xFF	; 255
    12d0:	bc 01       	movw	r22, r24
    12d2:	cd 01       	movw	r24, r26
    12d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	f8 01       	movw	r30, r16
    12de:	91 83       	std	Z+1, r25	; 0x01
    12e0:	80 83       	st	Z, r24
    12e2:	1f c0       	rjmp	.+62     	; 0x1322 <main+0x51c>
    12e4:	fe 01       	movw	r30, r28
    12e6:	eb 59       	subi	r30, 0x9B	; 155
    12e8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ea:	89 e1       	ldi	r24, 0x19	; 25
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	91 83       	std	Z+1, r25	; 0x01
    12f0:	80 83       	st	Z, r24
    12f2:	fe 01       	movw	r30, r28
    12f4:	eb 59       	subi	r30, 0x9B	; 155
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	80 81       	ld	r24, Z
    12fa:	91 81       	ldd	r25, Z+1	; 0x01
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <main+0x4f6>
    1300:	fe 01       	movw	r30, r28
    1302:	eb 59       	subi	r30, 0x9B	; 155
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	91 83       	std	Z+1, r25	; 0x01
    1308:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    130a:	de 01       	movw	r26, r28
    130c:	a9 59       	subi	r26, 0x99	; 153
    130e:	bf 4f       	sbci	r27, 0xFF	; 255
    1310:	fe 01       	movw	r30, r28
    1312:	e9 59       	subi	r30, 0x99	; 153
    1314:	ff 4f       	sbci	r31, 0xFF	; 255
    1316:	80 81       	ld	r24, Z
    1318:	91 81       	ldd	r25, Z+1	; 0x01
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	11 96       	adiw	r26, 0x01	; 1
    131e:	9c 93       	st	X, r25
    1320:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1322:	fe 01       	movw	r30, r28
    1324:	e9 59       	subi	r30, 0x99	; 153
    1326:	ff 4f       	sbci	r31, 0xFF	; 255
    1328:	80 81       	ld	r24, Z
    132a:	91 81       	ldd	r25, Z+1	; 0x01
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	d1 f6       	brne	.-76     	; 0x12e4 <main+0x4de>
    1330:	27 c0       	rjmp	.+78     	; 0x1380 <main+0x57a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1332:	8e 01       	movw	r16, r28
    1334:	09 59       	subi	r16, 0x99	; 153
    1336:	1f 4f       	sbci	r17, 0xFF	; 255
    1338:	fe 01       	movw	r30, r28
    133a:	e7 59       	subi	r30, 0x97	; 151
    133c:	ff 4f       	sbci	r31, 0xFF	; 255
    133e:	60 81       	ld	r22, Z
    1340:	71 81       	ldd	r23, Z+1	; 0x01
    1342:	82 81       	ldd	r24, Z+2	; 0x02
    1344:	93 81       	ldd	r25, Z+3	; 0x03
    1346:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	f8 01       	movw	r30, r16
    1350:	91 83       	std	Z+1, r25	; 0x01
    1352:	80 83       	st	Z, r24
    1354:	de 01       	movw	r26, r28
    1356:	ad 59       	subi	r26, 0x9D	; 157
    1358:	bf 4f       	sbci	r27, 0xFF	; 255
    135a:	fe 01       	movw	r30, r28
    135c:	e9 59       	subi	r30, 0x99	; 153
    135e:	ff 4f       	sbci	r31, 0xFF	; 255
    1360:	80 81       	ld	r24, Z
    1362:	91 81       	ldd	r25, Z+1	; 0x01
    1364:	8d 93       	st	X+, r24
    1366:	9c 93       	st	X, r25
    1368:	fe 01       	movw	r30, r28
    136a:	ed 59       	subi	r30, 0x9D	; 157
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	80 81       	ld	r24, Z
    1370:	91 81       	ldd	r25, Z+1	; 0x01
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	f1 f7       	brne	.-4      	; 0x1372 <main+0x56c>
    1376:	fe 01       	movw	r30, r28
    1378:	ed 59       	subi	r30, 0x9D	; 157
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	91 83       	std	Z+1, r25	; 0x01
    137e:	80 83       	st	Z, r24
	uint8 eq = 0;
	sint16 result = 0;/*      -32768 .. +32767          */
	UART_init();
    while(1)
    {
    	for(int i =0; i<4; i++){//get lhs
    1380:	de 01       	movw	r26, r28
    1382:	ac 56       	subi	r26, 0x6C	; 108
    1384:	bf 4f       	sbci	r27, 0xFF	; 255
    1386:	fe 01       	movw	r30, r28
    1388:	ec 56       	subi	r30, 0x6C	; 108
    138a:	ff 4f       	sbci	r31, 0xFF	; 255
    138c:	80 81       	ld	r24, Z
    138e:	91 81       	ldd	r25, Z+1	; 0x01
    1390:	01 96       	adiw	r24, 0x01	; 1
    1392:	11 96       	adiw	r26, 0x01	; 1
    1394:	9c 93       	st	X, r25
    1396:	8e 93       	st	-X, r24
    1398:	fe 01       	movw	r30, r28
    139a:	ec 56       	subi	r30, 0x6C	; 108
    139c:	ff 4f       	sbci	r31, 0xFF	; 255
    139e:	80 81       	ld	r24, Z
    13a0:	91 81       	ldd	r25, Z+1	; 0x01
    13a2:	84 30       	cpi	r24, 0x04	; 4
    13a4:	91 05       	cpc	r25, r1
    13a6:	0c f4       	brge	.+2      	; 0x13aa <main+0x5a4>
    13a8:	58 cd       	rjmp	.-1360   	; 0xe5a <main+0x54>
    		   	UART_sendByte(key);
    		    _delay_ms(500);
    		}
    	}

		for(int i =0; i<4; i++){//get lhs
    13aa:	fe 01       	movw	r30, r28
    13ac:	ef 56       	subi	r30, 0x6F	; 111
    13ae:	ff 4f       	sbci	r31, 0xFF	; 255
    13b0:	11 82       	std	Z+1, r1	; 0x01
    13b2:	10 82       	st	Z, r1
    13b4:	5f c2       	rjmp	.+1214   	; 0x1874 <main+0xa6e>
			uint8 key = KeyPad_getPressedKey(); //get the pressed key
    13b6:	0e 94 9b 05 	call	0xb36	; 0xb36 <KeyPad_getPressedKey>
    13ba:	fe 01       	movw	r30, r28
    13bc:	e0 57       	subi	r30, 0x70	; 112
    13be:	ff 4f       	sbci	r31, 0xFF	; 255
    13c0:	80 83       	st	Z, r24
			if(key == 13){//clear screen
    13c2:	fe 01       	movw	r30, r28
    13c4:	e0 57       	subi	r30, 0x70	; 112
    13c6:	ff 4f       	sbci	r31, 0xFF	; 255
    13c8:	80 81       	ld	r24, Z
    13ca:	8d 30       	cpi	r24, 0x0D	; 13
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <main+0x5ca>
    13ce:	d0 c0       	rjmp	.+416    	; 0x1570 <main+0x76a>
				UART_sendByte(key);
    13d0:	fe 01       	movw	r30, r28
    13d2:	e0 57       	subi	r30, 0x70	; 112
    13d4:	ff 4f       	sbci	r31, 0xFF	; 255
    13d6:	80 81       	ld	r24, Z
    13d8:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <UART_sendByte>
    13dc:	fe 01       	movw	r30, r28
    13de:	e1 5a       	subi	r30, 0xA1	; 161
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	aa ef       	ldi	r26, 0xFA	; 250
    13e8:	b3 e4       	ldi	r27, 0x43	; 67
    13ea:	80 83       	st	Z, r24
    13ec:	91 83       	std	Z+1, r25	; 0x01
    13ee:	a2 83       	std	Z+2, r26	; 0x02
    13f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f2:	8e 01       	movw	r16, r28
    13f4:	05 5a       	subi	r16, 0xA5	; 165
    13f6:	1f 4f       	sbci	r17, 0xFF	; 255
    13f8:	fe 01       	movw	r30, r28
    13fa:	e1 5a       	subi	r30, 0xA1	; 161
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	60 81       	ld	r22, Z
    1400:	71 81       	ldd	r23, Z+1	; 0x01
    1402:	82 81       	ldd	r24, Z+2	; 0x02
    1404:	93 81       	ldd	r25, Z+3	; 0x03
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	4a e7       	ldi	r20, 0x7A	; 122
    140c:	53 e4       	ldi	r21, 0x43	; 67
    140e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	f8 01       	movw	r30, r16
    1418:	80 83       	st	Z, r24
    141a:	91 83       	std	Z+1, r25	; 0x01
    141c:	a2 83       	std	Z+2, r26	; 0x02
    141e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1420:	fe 01       	movw	r30, r28
    1422:	e5 5a       	subi	r30, 0xA5	; 165
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	60 81       	ld	r22, Z
    1428:	71 81       	ldd	r23, Z+1	; 0x01
    142a:	82 81       	ldd	r24, Z+2	; 0x02
    142c:	93 81       	ldd	r25, Z+3	; 0x03
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 e8       	ldi	r20, 0x80	; 128
    1434:	5f e3       	ldi	r21, 0x3F	; 63
    1436:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    143a:	88 23       	and	r24, r24
    143c:	44 f4       	brge	.+16     	; 0x144e <main+0x648>
		__ticks = 1;
    143e:	fe 01       	movw	r30, r28
    1440:	e7 5a       	subi	r30, 0xA7	; 167
    1442:	ff 4f       	sbci	r31, 0xFF	; 255
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	91 83       	std	Z+1, r25	; 0x01
    144a:	80 83       	st	Z, r24
    144c:	64 c0       	rjmp	.+200    	; 0x1516 <main+0x710>
	else if (__tmp > 65535)
    144e:	fe 01       	movw	r30, r28
    1450:	e5 5a       	subi	r30, 0xA5	; 165
    1452:	ff 4f       	sbci	r31, 0xFF	; 255
    1454:	60 81       	ld	r22, Z
    1456:	71 81       	ldd	r23, Z+1	; 0x01
    1458:	82 81       	ldd	r24, Z+2	; 0x02
    145a:	93 81       	ldd	r25, Z+3	; 0x03
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	3f ef       	ldi	r19, 0xFF	; 255
    1460:	4f e7       	ldi	r20, 0x7F	; 127
    1462:	57 e4       	ldi	r21, 0x47	; 71
    1464:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1468:	18 16       	cp	r1, r24
    146a:	0c f0       	brlt	.+2      	; 0x146e <main+0x668>
    146c:	43 c0       	rjmp	.+134    	; 0x14f4 <main+0x6ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    146e:	fe 01       	movw	r30, r28
    1470:	e1 5a       	subi	r30, 0xA1	; 161
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	60 81       	ld	r22, Z
    1476:	71 81       	ldd	r23, Z+1	; 0x01
    1478:	82 81       	ldd	r24, Z+2	; 0x02
    147a:	93 81       	ldd	r25, Z+3	; 0x03
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e2       	ldi	r20, 0x20	; 32
    1482:	51 e4       	ldi	r21, 0x41	; 65
    1484:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	8e 01       	movw	r16, r28
    148e:	07 5a       	subi	r16, 0xA7	; 167
    1490:	1f 4f       	sbci	r17, 0xFF	; 255
    1492:	bc 01       	movw	r22, r24
    1494:	cd 01       	movw	r24, r26
    1496:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	f8 01       	movw	r30, r16
    14a0:	91 83       	std	Z+1, r25	; 0x01
    14a2:	80 83       	st	Z, r24
    14a4:	1f c0       	rjmp	.+62     	; 0x14e4 <main+0x6de>
    14a6:	fe 01       	movw	r30, r28
    14a8:	e9 5a       	subi	r30, 0xA9	; 169
    14aa:	ff 4f       	sbci	r31, 0xFF	; 255
    14ac:	89 e1       	ldi	r24, 0x19	; 25
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	91 83       	std	Z+1, r25	; 0x01
    14b2:	80 83       	st	Z, r24
    14b4:	fe 01       	movw	r30, r28
    14b6:	e9 5a       	subi	r30, 0xA9	; 169
    14b8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ba:	80 81       	ld	r24, Z
    14bc:	91 81       	ldd	r25, Z+1	; 0x01
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	f1 f7       	brne	.-4      	; 0x14be <main+0x6b8>
    14c2:	fe 01       	movw	r30, r28
    14c4:	e9 5a       	subi	r30, 0xA9	; 169
    14c6:	ff 4f       	sbci	r31, 0xFF	; 255
    14c8:	91 83       	std	Z+1, r25	; 0x01
    14ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14cc:	de 01       	movw	r26, r28
    14ce:	a7 5a       	subi	r26, 0xA7	; 167
    14d0:	bf 4f       	sbci	r27, 0xFF	; 255
    14d2:	fe 01       	movw	r30, r28
    14d4:	e7 5a       	subi	r30, 0xA7	; 167
    14d6:	ff 4f       	sbci	r31, 0xFF	; 255
    14d8:	80 81       	ld	r24, Z
    14da:	91 81       	ldd	r25, Z+1	; 0x01
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	11 96       	adiw	r26, 0x01	; 1
    14e0:	9c 93       	st	X, r25
    14e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e4:	fe 01       	movw	r30, r28
    14e6:	e7 5a       	subi	r30, 0xA7	; 167
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	80 81       	ld	r24, Z
    14ec:	91 81       	ldd	r25, Z+1	; 0x01
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	d1 f6       	brne	.-76     	; 0x14a6 <main+0x6a0>
    14f2:	28 c0       	rjmp	.+80     	; 0x1544 <main+0x73e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f4:	8e 01       	movw	r16, r28
    14f6:	07 5a       	subi	r16, 0xA7	; 167
    14f8:	1f 4f       	sbci	r17, 0xFF	; 255
    14fa:	fe 01       	movw	r30, r28
    14fc:	e5 5a       	subi	r30, 0xA5	; 165
    14fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1500:	60 81       	ld	r22, Z
    1502:	71 81       	ldd	r23, Z+1	; 0x01
    1504:	82 81       	ldd	r24, Z+2	; 0x02
    1506:	93 81       	ldd	r25, Z+3	; 0x03
    1508:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	f8 01       	movw	r30, r16
    1512:	91 83       	std	Z+1, r25	; 0x01
    1514:	80 83       	st	Z, r24
    1516:	de 01       	movw	r26, r28
    1518:	ab 5a       	subi	r26, 0xAB	; 171
    151a:	bf 4f       	sbci	r27, 0xFF	; 255
    151c:	fe 01       	movw	r30, r28
    151e:	e7 5a       	subi	r30, 0xA7	; 167
    1520:	ff 4f       	sbci	r31, 0xFF	; 255
    1522:	80 81       	ld	r24, Z
    1524:	91 81       	ldd	r25, Z+1	; 0x01
    1526:	11 96       	adiw	r26, 0x01	; 1
    1528:	9c 93       	st	X, r25
    152a:	8e 93       	st	-X, r24
    152c:	fe 01       	movw	r30, r28
    152e:	eb 5a       	subi	r30, 0xAB	; 171
    1530:	ff 4f       	sbci	r31, 0xFF	; 255
    1532:	80 81       	ld	r24, Z
    1534:	91 81       	ldd	r25, Z+1	; 0x01
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	f1 f7       	brne	.-4      	; 0x1536 <main+0x730>
    153a:	fe 01       	movw	r30, r28
    153c:	eb 5a       	subi	r30, 0xAB	; 171
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	91 83       	std	Z+1, r25	; 0x01
    1542:	80 83       	st	Z, r24
				_delay_ms(500);
				lhs = 0;
    1544:	fe 01       	movw	r30, r28
    1546:	e1 56       	subi	r30, 0x61	; 97
    1548:	ff 4f       	sbci	r31, 0xFF	; 255
    154a:	10 82       	st	Z, r1
				rhs = 0;
    154c:	fe 01       	movw	r30, r28
    154e:	e2 56       	subi	r30, 0x62	; 98
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	10 82       	st	Z, r1
				op = 0;
    1554:	fe 01       	movw	r30, r28
    1556:	e3 56       	subi	r30, 0x63	; 99
    1558:	ff 4f       	sbci	r31, 0xFF	; 255
    155a:	10 82       	st	Z, r1
				eq = 0;
    155c:	fe 01       	movw	r30, r28
    155e:	e4 56       	subi	r30, 0x64	; 100
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	10 82       	st	Z, r1
				result = 0;
    1564:	fe 01       	movw	r30, r28
    1566:	e6 56       	subi	r30, 0x66	; 102
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	11 82       	std	Z+1, r1	; 0x01
    156c:	10 82       	st	Z, r1
    156e:	8b c1       	rjmp	.+790    	; 0x1886 <main+0xa80>
				break;
			}else if(key == '='){
    1570:	fe 01       	movw	r30, r28
    1572:	e0 57       	subi	r30, 0x70	; 112
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	80 81       	ld	r24, Z
    1578:	8d 33       	cpi	r24, 0x3D	; 61
    157a:	09 f0       	breq	.+2      	; 0x157e <main+0x778>
    157c:	c3 c0       	rjmp	.+390    	; 0x1704 <main+0x8fe>
				eq = key;
    157e:	de 01       	movw	r26, r28
    1580:	a4 56       	subi	r26, 0x64	; 100
    1582:	bf 4f       	sbci	r27, 0xFF	; 255
    1584:	fe 01       	movw	r30, r28
    1586:	e0 57       	subi	r30, 0x70	; 112
    1588:	ff 4f       	sbci	r31, 0xFF	; 255
    158a:	80 81       	ld	r24, Z
    158c:	8c 93       	st	X, r24
				UART_sendByte(eq);
    158e:	fe 01       	movw	r30, r28
    1590:	e4 56       	subi	r30, 0x64	; 100
    1592:	ff 4f       	sbci	r31, 0xFF	; 255
    1594:	80 81       	ld	r24, Z
    1596:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <UART_sendByte>
    159a:	fe 01       	movw	r30, r28
    159c:	ef 5a       	subi	r30, 0xAF	; 175
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	aa ef       	ldi	r26, 0xFA	; 250
    15a6:	b3 e4       	ldi	r27, 0x43	; 67
    15a8:	80 83       	st	Z, r24
    15aa:	91 83       	std	Z+1, r25	; 0x01
    15ac:	a2 83       	std	Z+2, r26	; 0x02
    15ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b0:	8e 01       	movw	r16, r28
    15b2:	03 5b       	subi	r16, 0xB3	; 179
    15b4:	1f 4f       	sbci	r17, 0xFF	; 255
    15b6:	fe 01       	movw	r30, r28
    15b8:	ef 5a       	subi	r30, 0xAF	; 175
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	60 81       	ld	r22, Z
    15be:	71 81       	ldd	r23, Z+1	; 0x01
    15c0:	82 81       	ldd	r24, Z+2	; 0x02
    15c2:	93 81       	ldd	r25, Z+3	; 0x03
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	4a e7       	ldi	r20, 0x7A	; 122
    15ca:	53 e4       	ldi	r21, 0x43	; 67
    15cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	f8 01       	movw	r30, r16
    15d6:	80 83       	st	Z, r24
    15d8:	91 83       	std	Z+1, r25	; 0x01
    15da:	a2 83       	std	Z+2, r26	; 0x02
    15dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15de:	fe 01       	movw	r30, r28
    15e0:	e3 5b       	subi	r30, 0xB3	; 179
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	60 81       	ld	r22, Z
    15e6:	71 81       	ldd	r23, Z+1	; 0x01
    15e8:	82 81       	ldd	r24, Z+2	; 0x02
    15ea:	93 81       	ldd	r25, Z+3	; 0x03
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e8       	ldi	r20, 0x80	; 128
    15f2:	5f e3       	ldi	r21, 0x3F	; 63
    15f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15f8:	88 23       	and	r24, r24
    15fa:	44 f4       	brge	.+16     	; 0x160c <main+0x806>
		__ticks = 1;
    15fc:	fe 01       	movw	r30, r28
    15fe:	e5 5b       	subi	r30, 0xB5	; 181
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	91 83       	std	Z+1, r25	; 0x01
    1608:	80 83       	st	Z, r24
    160a:	64 c0       	rjmp	.+200    	; 0x16d4 <main+0x8ce>
	else if (__tmp > 65535)
    160c:	fe 01       	movw	r30, r28
    160e:	e3 5b       	subi	r30, 0xB3	; 179
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	60 81       	ld	r22, Z
    1614:	71 81       	ldd	r23, Z+1	; 0x01
    1616:	82 81       	ldd	r24, Z+2	; 0x02
    1618:	93 81       	ldd	r25, Z+3	; 0x03
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	3f ef       	ldi	r19, 0xFF	; 255
    161e:	4f e7       	ldi	r20, 0x7F	; 127
    1620:	57 e4       	ldi	r21, 0x47	; 71
    1622:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1626:	18 16       	cp	r1, r24
    1628:	0c f0       	brlt	.+2      	; 0x162c <main+0x826>
    162a:	43 c0       	rjmp	.+134    	; 0x16b2 <main+0x8ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162c:	fe 01       	movw	r30, r28
    162e:	ef 5a       	subi	r30, 0xAF	; 175
    1630:	ff 4f       	sbci	r31, 0xFF	; 255
    1632:	60 81       	ld	r22, Z
    1634:	71 81       	ldd	r23, Z+1	; 0x01
    1636:	82 81       	ldd	r24, Z+2	; 0x02
    1638:	93 81       	ldd	r25, Z+3	; 0x03
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e2       	ldi	r20, 0x20	; 32
    1640:	51 e4       	ldi	r21, 0x41	; 65
    1642:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	8e 01       	movw	r16, r28
    164c:	05 5b       	subi	r16, 0xB5	; 181
    164e:	1f 4f       	sbci	r17, 0xFF	; 255
    1650:	bc 01       	movw	r22, r24
    1652:	cd 01       	movw	r24, r26
    1654:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	f8 01       	movw	r30, r16
    165e:	91 83       	std	Z+1, r25	; 0x01
    1660:	80 83       	st	Z, r24
    1662:	1f c0       	rjmp	.+62     	; 0x16a2 <main+0x89c>
    1664:	fe 01       	movw	r30, r28
    1666:	e7 5b       	subi	r30, 0xB7	; 183
    1668:	ff 4f       	sbci	r31, 0xFF	; 255
    166a:	89 e1       	ldi	r24, 0x19	; 25
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	91 83       	std	Z+1, r25	; 0x01
    1670:	80 83       	st	Z, r24
    1672:	fe 01       	movw	r30, r28
    1674:	e7 5b       	subi	r30, 0xB7	; 183
    1676:	ff 4f       	sbci	r31, 0xFF	; 255
    1678:	80 81       	ld	r24, Z
    167a:	91 81       	ldd	r25, Z+1	; 0x01
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	f1 f7       	brne	.-4      	; 0x167c <main+0x876>
    1680:	fe 01       	movw	r30, r28
    1682:	e7 5b       	subi	r30, 0xB7	; 183
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	91 83       	std	Z+1, r25	; 0x01
    1688:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168a:	de 01       	movw	r26, r28
    168c:	a5 5b       	subi	r26, 0xB5	; 181
    168e:	bf 4f       	sbci	r27, 0xFF	; 255
    1690:	fe 01       	movw	r30, r28
    1692:	e5 5b       	subi	r30, 0xB5	; 181
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	80 81       	ld	r24, Z
    1698:	91 81       	ldd	r25, Z+1	; 0x01
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	11 96       	adiw	r26, 0x01	; 1
    169e:	9c 93       	st	X, r25
    16a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a2:	fe 01       	movw	r30, r28
    16a4:	e5 5b       	subi	r30, 0xB5	; 181
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	80 81       	ld	r24, Z
    16aa:	91 81       	ldd	r25, Z+1	; 0x01
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	d1 f6       	brne	.-76     	; 0x1664 <main+0x85e>
    16b0:	ea c0       	rjmp	.+468    	; 0x1886 <main+0xa80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b2:	8e 01       	movw	r16, r28
    16b4:	05 5b       	subi	r16, 0xB5	; 181
    16b6:	1f 4f       	sbci	r17, 0xFF	; 255
    16b8:	fe 01       	movw	r30, r28
    16ba:	e3 5b       	subi	r30, 0xB3	; 179
    16bc:	ff 4f       	sbci	r31, 0xFF	; 255
    16be:	60 81       	ld	r22, Z
    16c0:	71 81       	ldd	r23, Z+1	; 0x01
    16c2:	82 81       	ldd	r24, Z+2	; 0x02
    16c4:	93 81       	ldd	r25, Z+3	; 0x03
    16c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	f8 01       	movw	r30, r16
    16d0:	91 83       	std	Z+1, r25	; 0x01
    16d2:	80 83       	st	Z, r24
    16d4:	de 01       	movw	r26, r28
    16d6:	a9 5b       	subi	r26, 0xB9	; 185
    16d8:	bf 4f       	sbci	r27, 0xFF	; 255
    16da:	fe 01       	movw	r30, r28
    16dc:	e5 5b       	subi	r30, 0xB5	; 181
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	80 81       	ld	r24, Z
    16e2:	91 81       	ldd	r25, Z+1	; 0x01
    16e4:	11 96       	adiw	r26, 0x01	; 1
    16e6:	9c 93       	st	X, r25
    16e8:	8e 93       	st	-X, r24
    16ea:	fe 01       	movw	r30, r28
    16ec:	e9 5b       	subi	r30, 0xB9	; 185
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	80 81       	ld	r24, Z
    16f2:	91 81       	ldd	r25, Z+1	; 0x01
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	f1 f7       	brne	.-4      	; 0x16f4 <main+0x8ee>
    16f8:	fe 01       	movw	r30, r28
    16fa:	e9 5b       	subi	r30, 0xB9	; 185
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	91 83       	std	Z+1, r25	; 0x01
    1700:	80 83       	st	Z, r24
    1702:	c1 c0       	rjmp	.+386    	; 0x1886 <main+0xa80>
				_delay_ms(500);
				break;
			}else if((key >=0) && (key <=9)){
    1704:	fe 01       	movw	r30, r28
    1706:	e0 57       	subi	r30, 0x70	; 112
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	80 81       	ld	r24, Z
    170c:	8a 30       	cpi	r24, 0x0A	; 10
    170e:	08 f0       	brcs	.+2      	; 0x1712 <main+0x90c>
    1710:	a5 c0       	rjmp	.+330    	; 0x185c <main+0xa56>
				rhs = (rhs*10) + key;
    1712:	fe 01       	movw	r30, r28
    1714:	e2 56       	subi	r30, 0x62	; 98
    1716:	ff 4f       	sbci	r31, 0xFF	; 255
    1718:	80 81       	ld	r24, Z
    171a:	88 2f       	mov	r24, r24
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	9c 01       	movw	r18, r24
    1720:	22 0f       	add	r18, r18
    1722:	33 1f       	adc	r19, r19
    1724:	c9 01       	movw	r24, r18
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	82 0f       	add	r24, r18
    1730:	93 1f       	adc	r25, r19
    1732:	98 2f       	mov	r25, r24
    1734:	de 01       	movw	r26, r28
    1736:	a2 56       	subi	r26, 0x62	; 98
    1738:	bf 4f       	sbci	r27, 0xFF	; 255
    173a:	fe 01       	movw	r30, r28
    173c:	e0 57       	subi	r30, 0x70	; 112
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	80 81       	ld	r24, Z
    1742:	89 0f       	add	r24, r25
    1744:	8c 93       	st	X, r24
				UART_sendByte(key);
    1746:	fe 01       	movw	r30, r28
    1748:	e0 57       	subi	r30, 0x70	; 112
    174a:	ff 4f       	sbci	r31, 0xFF	; 255
    174c:	80 81       	ld	r24, Z
    174e:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <UART_sendByte>
    1752:	fe 01       	movw	r30, r28
    1754:	ed 5b       	subi	r30, 0xBD	; 189
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	aa ef       	ldi	r26, 0xFA	; 250
    175e:	b3 e4       	ldi	r27, 0x43	; 67
    1760:	80 83       	st	Z, r24
    1762:	91 83       	std	Z+1, r25	; 0x01
    1764:	a2 83       	std	Z+2, r26	; 0x02
    1766:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1768:	8e 01       	movw	r16, r28
    176a:	01 5c       	subi	r16, 0xC1	; 193
    176c:	1f 4f       	sbci	r17, 0xFF	; 255
    176e:	fe 01       	movw	r30, r28
    1770:	ed 5b       	subi	r30, 0xBD	; 189
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	60 81       	ld	r22, Z
    1776:	71 81       	ldd	r23, Z+1	; 0x01
    1778:	82 81       	ldd	r24, Z+2	; 0x02
    177a:	93 81       	ldd	r25, Z+3	; 0x03
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	4a e7       	ldi	r20, 0x7A	; 122
    1782:	53 e4       	ldi	r21, 0x43	; 67
    1784:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	f8 01       	movw	r30, r16
    178e:	80 83       	st	Z, r24
    1790:	91 83       	std	Z+1, r25	; 0x01
    1792:	a2 83       	std	Z+2, r26	; 0x02
    1794:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1796:	fe 01       	movw	r30, r28
    1798:	ff 96       	adiw	r30, 0x3f	; 63
    179a:	60 81       	ld	r22, Z
    179c:	71 81       	ldd	r23, Z+1	; 0x01
    179e:	82 81       	ldd	r24, Z+2	; 0x02
    17a0:	93 81       	ldd	r25, Z+3	; 0x03
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	40 e8       	ldi	r20, 0x80	; 128
    17a8:	5f e3       	ldi	r21, 0x3F	; 63
    17aa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17ae:	88 23       	and	r24, r24
    17b0:	2c f4       	brge	.+10     	; 0x17bc <main+0x9b6>
		__ticks = 1;
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	9e af       	std	Y+62, r25	; 0x3e
    17b8:	8d af       	std	Y+61, r24	; 0x3d
    17ba:	46 c0       	rjmp	.+140    	; 0x1848 <main+0xa42>
	else if (__tmp > 65535)
    17bc:	fe 01       	movw	r30, r28
    17be:	ff 96       	adiw	r30, 0x3f	; 63
    17c0:	60 81       	ld	r22, Z
    17c2:	71 81       	ldd	r23, Z+1	; 0x01
    17c4:	82 81       	ldd	r24, Z+2	; 0x02
    17c6:	93 81       	ldd	r25, Z+3	; 0x03
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	3f ef       	ldi	r19, 0xFF	; 255
    17cc:	4f e7       	ldi	r20, 0x7F	; 127
    17ce:	57 e4       	ldi	r21, 0x47	; 71
    17d0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17d4:	18 16       	cp	r1, r24
    17d6:	64 f5       	brge	.+88     	; 0x1830 <main+0xa2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d8:	fe 01       	movw	r30, r28
    17da:	ed 5b       	subi	r30, 0xBD	; 189
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	60 81       	ld	r22, Z
    17e0:	71 81       	ldd	r23, Z+1	; 0x01
    17e2:	82 81       	ldd	r24, Z+2	; 0x02
    17e4:	93 81       	ldd	r25, Z+3	; 0x03
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e2       	ldi	r20, 0x20	; 32
    17ec:	51 e4       	ldi	r21, 0x41	; 65
    17ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	bc 01       	movw	r22, r24
    17f8:	cd 01       	movw	r24, r26
    17fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	9e af       	std	Y+62, r25	; 0x3e
    1804:	8d af       	std	Y+61, r24	; 0x3d
    1806:	0f c0       	rjmp	.+30     	; 0x1826 <main+0xa20>
    1808:	89 e1       	ldi	r24, 0x19	; 25
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	9c af       	std	Y+60, r25	; 0x3c
    180e:	8b af       	std	Y+59, r24	; 0x3b
    1810:	8b ad       	ldd	r24, Y+59	; 0x3b
    1812:	9c ad       	ldd	r25, Y+60	; 0x3c
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	f1 f7       	brne	.-4      	; 0x1814 <main+0xa0e>
    1818:	9c af       	std	Y+60, r25	; 0x3c
    181a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181c:	8d ad       	ldd	r24, Y+61	; 0x3d
    181e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	9e af       	std	Y+62, r25	; 0x3e
    1824:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1826:	8d ad       	ldd	r24, Y+61	; 0x3d
    1828:	9e ad       	ldd	r25, Y+62	; 0x3e
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	69 f7       	brne	.-38     	; 0x1808 <main+0xa02>
    182e:	16 c0       	rjmp	.+44     	; 0x185c <main+0xa56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1830:	fe 01       	movw	r30, r28
    1832:	ff 96       	adiw	r30, 0x3f	; 63
    1834:	60 81       	ld	r22, Z
    1836:	71 81       	ldd	r23, Z+1	; 0x01
    1838:	82 81       	ldd	r24, Z+2	; 0x02
    183a:	93 81       	ldd	r25, Z+3	; 0x03
    183c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	9e af       	std	Y+62, r25	; 0x3e
    1846:	8d af       	std	Y+61, r24	; 0x3d
    1848:	8d ad       	ldd	r24, Y+61	; 0x3d
    184a:	9e ad       	ldd	r25, Y+62	; 0x3e
    184c:	9a af       	std	Y+58, r25	; 0x3a
    184e:	89 af       	std	Y+57, r24	; 0x39
    1850:	89 ad       	ldd	r24, Y+57	; 0x39
    1852:	9a ad       	ldd	r25, Y+58	; 0x3a
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	f1 f7       	brne	.-4      	; 0x1854 <main+0xa4e>
    1858:	9a af       	std	Y+58, r25	; 0x3a
    185a:	89 af       	std	Y+57, r24	; 0x39
    		   	UART_sendByte(key);
    		    _delay_ms(500);
    		}
    	}

		for(int i =0; i<4; i++){//get lhs
    185c:	de 01       	movw	r26, r28
    185e:	af 56       	subi	r26, 0x6F	; 111
    1860:	bf 4f       	sbci	r27, 0xFF	; 255
    1862:	fe 01       	movw	r30, r28
    1864:	ef 56       	subi	r30, 0x6F	; 111
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	80 81       	ld	r24, Z
    186a:	91 81       	ldd	r25, Z+1	; 0x01
    186c:	01 96       	adiw	r24, 0x01	; 1
    186e:	11 96       	adiw	r26, 0x01	; 1
    1870:	9c 93       	st	X, r25
    1872:	8e 93       	st	-X, r24
    1874:	fe 01       	movw	r30, r28
    1876:	ef 56       	subi	r30, 0x6F	; 111
    1878:	ff 4f       	sbci	r31, 0xFF	; 255
    187a:	80 81       	ld	r24, Z
    187c:	91 81       	ldd	r25, Z+1	; 0x01
    187e:	84 30       	cpi	r24, 0x04	; 4
    1880:	91 05       	cpc	r25, r1
    1882:	0c f4       	brge	.+2      	; 0x1886 <main+0xa80>
    1884:	98 cd       	rjmp	.-1232   	; 0x13b6 <main+0x5b0>
				rhs = (rhs*10) + key;
				UART_sendByte(key);
				_delay_ms(500);
			}
		}
    	result = calculate_result(lhs, op, rhs);
    1886:	fe 01       	movw	r30, r28
    1888:	e1 56       	subi	r30, 0x61	; 97
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	de 01       	movw	r26, r28
    188e:	a3 56       	subi	r26, 0x63	; 99
    1890:	bf 4f       	sbci	r27, 0xFF	; 255
    1892:	9e 01       	movw	r18, r28
    1894:	22 56       	subi	r18, 0x62	; 98
    1896:	3f 4f       	sbci	r19, 0xFF	; 255
    1898:	80 81       	ld	r24, Z
    189a:	6c 91       	ld	r22, X
    189c:	f9 01       	movw	r30, r18
    189e:	40 81       	ld	r20, Z
    18a0:	0e 94 99 06 	call	0xd32	; 0xd32 <calculate_result>
    18a4:	fe 01       	movw	r30, r28
    18a6:	e6 56       	subi	r30, 0x66	; 102
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	91 83       	std	Z+1, r25	; 0x01
    18ac:	80 83       	st	Z, r24
    	uint16 p_result;
    	if(result<0){
    18ae:	fe 01       	movw	r30, r28
    18b0:	e6 56       	subi	r30, 0x66	; 102
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	80 81       	ld	r24, Z
    18b6:	91 81       	ldd	r25, Z+1	; 0x01
    18b8:	99 23       	and	r25, r25
    18ba:	0c f0       	brlt	.+2      	; 0x18be <main+0xab8>
    18bc:	83 c0       	rjmp	.+262    	; 0x19c4 <main+0xbbe>
    		UART_sendByte('-');
    18be:	8d e2       	ldi	r24, 0x2D	; 45
    18c0:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <UART_sendByte>
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	aa ef       	ldi	r26, 0xFA	; 250
    18ca:	b3 e4       	ldi	r27, 0x43	; 67
    18cc:	8d ab       	std	Y+53, r24	; 0x35
    18ce:	9e ab       	std	Y+54, r25	; 0x36
    18d0:	af ab       	std	Y+55, r26	; 0x37
    18d2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d4:	6d a9       	ldd	r22, Y+53	; 0x35
    18d6:	7e a9       	ldd	r23, Y+54	; 0x36
    18d8:	8f a9       	ldd	r24, Y+55	; 0x37
    18da:	98 ad       	ldd	r25, Y+56	; 0x38
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	4a e7       	ldi	r20, 0x7A	; 122
    18e2:	53 e4       	ldi	r21, 0x43	; 67
    18e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	89 ab       	std	Y+49, r24	; 0x31
    18ee:	9a ab       	std	Y+50, r25	; 0x32
    18f0:	ab ab       	std	Y+51, r26	; 0x33
    18f2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18f4:	69 a9       	ldd	r22, Y+49	; 0x31
    18f6:	7a a9       	ldd	r23, Y+50	; 0x32
    18f8:	8b a9       	ldd	r24, Y+51	; 0x33
    18fa:	9c a9       	ldd	r25, Y+52	; 0x34
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e8       	ldi	r20, 0x80	; 128
    1902:	5f e3       	ldi	r21, 0x3F	; 63
    1904:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1908:	88 23       	and	r24, r24
    190a:	2c f4       	brge	.+10     	; 0x1916 <main+0xb10>
		__ticks = 1;
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	98 ab       	std	Y+48, r25	; 0x30
    1912:	8f a7       	std	Y+47, r24	; 0x2f
    1914:	3f c0       	rjmp	.+126    	; 0x1994 <main+0xb8e>
	else if (__tmp > 65535)
    1916:	69 a9       	ldd	r22, Y+49	; 0x31
    1918:	7a a9       	ldd	r23, Y+50	; 0x32
    191a:	8b a9       	ldd	r24, Y+51	; 0x33
    191c:	9c a9       	ldd	r25, Y+52	; 0x34
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	3f ef       	ldi	r19, 0xFF	; 255
    1922:	4f e7       	ldi	r20, 0x7F	; 127
    1924:	57 e4       	ldi	r21, 0x47	; 71
    1926:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    192a:	18 16       	cp	r1, r24
    192c:	4c f5       	brge	.+82     	; 0x1980 <main+0xb7a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192e:	6d a9       	ldd	r22, Y+53	; 0x35
    1930:	7e a9       	ldd	r23, Y+54	; 0x36
    1932:	8f a9       	ldd	r24, Y+55	; 0x37
    1934:	98 ad       	ldd	r25, Y+56	; 0x38
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e2       	ldi	r20, 0x20	; 32
    193c:	51 e4       	ldi	r21, 0x41	; 65
    193e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	bc 01       	movw	r22, r24
    1948:	cd 01       	movw	r24, r26
    194a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	98 ab       	std	Y+48, r25	; 0x30
    1954:	8f a7       	std	Y+47, r24	; 0x2f
    1956:	0f c0       	rjmp	.+30     	; 0x1976 <main+0xb70>
    1958:	89 e1       	ldi	r24, 0x19	; 25
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	9e a7       	std	Y+46, r25	; 0x2e
    195e:	8d a7       	std	Y+45, r24	; 0x2d
    1960:	8d a5       	ldd	r24, Y+45	; 0x2d
    1962:	9e a5       	ldd	r25, Y+46	; 0x2e
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	f1 f7       	brne	.-4      	; 0x1964 <main+0xb5e>
    1968:	9e a7       	std	Y+46, r25	; 0x2e
    196a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196c:	8f a5       	ldd	r24, Y+47	; 0x2f
    196e:	98 a9       	ldd	r25, Y+48	; 0x30
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	98 ab       	std	Y+48, r25	; 0x30
    1974:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1976:	8f a5       	ldd	r24, Y+47	; 0x2f
    1978:	98 a9       	ldd	r25, Y+48	; 0x30
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	69 f7       	brne	.-38     	; 0x1958 <main+0xb52>
    197e:	14 c0       	rjmp	.+40     	; 0x19a8 <main+0xba2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1980:	69 a9       	ldd	r22, Y+49	; 0x31
    1982:	7a a9       	ldd	r23, Y+50	; 0x32
    1984:	8b a9       	ldd	r24, Y+51	; 0x33
    1986:	9c a9       	ldd	r25, Y+52	; 0x34
    1988:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	98 ab       	std	Y+48, r25	; 0x30
    1992:	8f a7       	std	Y+47, r24	; 0x2f
    1994:	8f a5       	ldd	r24, Y+47	; 0x2f
    1996:	98 a9       	ldd	r25, Y+48	; 0x30
    1998:	9c a7       	std	Y+44, r25	; 0x2c
    199a:	8b a7       	std	Y+43, r24	; 0x2b
    199c:	8b a5       	ldd	r24, Y+43	; 0x2b
    199e:	9c a5       	ldd	r25, Y+44	; 0x2c
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	f1 f7       	brne	.-4      	; 0x19a0 <main+0xb9a>
    19a4:	9c a7       	std	Y+44, r25	; 0x2c
    19a6:	8b a7       	std	Y+43, r24	; 0x2b
    		_delay_ms(500);
    		p_result = (-1) * result;/*           0 .. 65535           */
    19a8:	fe 01       	movw	r30, r28
    19aa:	e6 56       	subi	r30, 0x66	; 102
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	80 81       	ld	r24, Z
    19b0:	91 81       	ldd	r25, Z+1	; 0x01
    19b2:	90 95       	com	r25
    19b4:	81 95       	neg	r24
    19b6:	9f 4f       	sbci	r25, 0xFF	; 255
    19b8:	fe 01       	movw	r30, r28
    19ba:	e8 56       	subi	r30, 0x68	; 104
    19bc:	ff 4f       	sbci	r31, 0xFF	; 255
    19be:	91 83       	std	Z+1, r25	; 0x01
    19c0:	80 83       	st	Z, r24
    19c2:	0b c0       	rjmp	.+22     	; 0x19da <main+0xbd4>
        		UART_sendByte((uint8)(p_result%10));
        		_delay_ms(500);
        		p_result /= 10;
    		}*/
    	}else{
    		p_result = result;
    19c4:	fe 01       	movw	r30, r28
    19c6:	e8 56       	subi	r30, 0x68	; 104
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	de 01       	movw	r26, r28
    19cc:	a6 56       	subi	r26, 0x66	; 102
    19ce:	bf 4f       	sbci	r27, 0xFF	; 255
    19d0:	8d 91       	ld	r24, X+
    19d2:	9c 91       	ld	r25, X
    19d4:	11 97       	sbiw	r26, 0x01	; 1
    19d6:	91 83       	std	Z+1, r25	; 0x01
    19d8:	80 83       	st	Z, r24
    		UART_sendByte((uint8)p_result);
    		_delay_ms(500);*/

    	}

		uint16 divider = 10000;
    19da:	fe 01       	movw	r30, r28
    19dc:	ea 56       	subi	r30, 0x6A	; 106
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	80 e1       	ldi	r24, 0x10	; 16
    19e2:	97 e2       	ldi	r25, 0x27	; 39
    19e4:	91 83       	std	Z+1, r25	; 0x01
    19e6:	80 83       	st	Z, r24
		if(p_result>=100){
    19e8:	fe 01       	movw	r30, r28
    19ea:	e8 56       	subi	r30, 0x68	; 104
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	80 81       	ld	r24, Z
    19f0:	91 81       	ldd	r25, Z+1	; 0x01
    19f2:	84 36       	cpi	r24, 0x64	; 100
    19f4:	91 05       	cpc	r25, r1
    19f6:	08 f4       	brcc	.+2      	; 0x19fa <main+0xbf4>
    19f8:	b4 c0       	rjmp	.+360    	; 0x1b62 <main+0xd5c>
			for(int i=0; i<5; i++){//max result is 5 digits
    19fa:	fe 01       	movw	r30, r28
    19fc:	e2 57       	subi	r30, 0x72	; 114
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	11 82       	std	Z+1, r1	; 0x01
    1a02:	10 82       	st	Z, r1
    1a04:	a4 c0       	rjmp	.+328    	; 0x1b4e <main+0xd48>
				UART_sendByte(((p_result/(divider))% 10));
    1a06:	fe 01       	movw	r30, r28
    1a08:	e8 56       	subi	r30, 0x68	; 104
    1a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0c:	de 01       	movw	r26, r28
    1a0e:	aa 56       	subi	r26, 0x6A	; 106
    1a10:	bf 4f       	sbci	r27, 0xFF	; 255
    1a12:	80 81       	ld	r24, Z
    1a14:	91 81       	ldd	r25, Z+1	; 0x01
    1a16:	2d 91       	ld	r18, X+
    1a18:	3c 91       	ld	r19, X
    1a1a:	b9 01       	movw	r22, r18
    1a1c:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__udivmodhi4>
    1a20:	cb 01       	movw	r24, r22
    1a22:	2a e0       	ldi	r18, 0x0A	; 10
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	b9 01       	movw	r22, r18
    1a28:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__udivmodhi4>
    1a2c:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <UART_sendByte>
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	aa ef       	ldi	r26, 0xFA	; 250
    1a36:	b3 e4       	ldi	r27, 0x43	; 67
    1a38:	8f a3       	std	Y+39, r24	; 0x27
    1a3a:	98 a7       	std	Y+40, r25	; 0x28
    1a3c:	a9 a7       	std	Y+41, r26	; 0x29
    1a3e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a40:	6f a1       	ldd	r22, Y+39	; 0x27
    1a42:	78 a5       	ldd	r23, Y+40	; 0x28
    1a44:	89 a5       	ldd	r24, Y+41	; 0x29
    1a46:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	4a e7       	ldi	r20, 0x7A	; 122
    1a4e:	53 e4       	ldi	r21, 0x43	; 67
    1a50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	8b a3       	std	Y+35, r24	; 0x23
    1a5a:	9c a3       	std	Y+36, r25	; 0x24
    1a5c:	ad a3       	std	Y+37, r26	; 0x25
    1a5e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a60:	6b a1       	ldd	r22, Y+35	; 0x23
    1a62:	7c a1       	ldd	r23, Y+36	; 0x24
    1a64:	8d a1       	ldd	r24, Y+37	; 0x25
    1a66:	9e a1       	ldd	r25, Y+38	; 0x26
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e8       	ldi	r20, 0x80	; 128
    1a6e:	5f e3       	ldi	r21, 0x3F	; 63
    1a70:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a74:	88 23       	and	r24, r24
    1a76:	2c f4       	brge	.+10     	; 0x1a82 <main+0xc7c>
		__ticks = 1;
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	9a a3       	std	Y+34, r25	; 0x22
    1a7e:	89 a3       	std	Y+33, r24	; 0x21
    1a80:	3f c0       	rjmp	.+126    	; 0x1b00 <main+0xcfa>
	else if (__tmp > 65535)
    1a82:	6b a1       	ldd	r22, Y+35	; 0x23
    1a84:	7c a1       	ldd	r23, Y+36	; 0x24
    1a86:	8d a1       	ldd	r24, Y+37	; 0x25
    1a88:	9e a1       	ldd	r25, Y+38	; 0x26
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	3f ef       	ldi	r19, 0xFF	; 255
    1a8e:	4f e7       	ldi	r20, 0x7F	; 127
    1a90:	57 e4       	ldi	r21, 0x47	; 71
    1a92:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a96:	18 16       	cp	r1, r24
    1a98:	4c f5       	brge	.+82     	; 0x1aec <main+0xce6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a9c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a9e:	89 a5       	ldd	r24, Y+41	; 0x29
    1aa0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	40 e2       	ldi	r20, 0x20	; 32
    1aa8:	51 e4       	ldi	r21, 0x41	; 65
    1aaa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	bc 01       	movw	r22, r24
    1ab4:	cd 01       	movw	r24, r26
    1ab6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	9a a3       	std	Y+34, r25	; 0x22
    1ac0:	89 a3       	std	Y+33, r24	; 0x21
    1ac2:	0f c0       	rjmp	.+30     	; 0x1ae2 <main+0xcdc>
    1ac4:	89 e1       	ldi	r24, 0x19	; 25
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	98 a3       	std	Y+32, r25	; 0x20
    1aca:	8f 8f       	std	Y+31, r24	; 0x1f
    1acc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ace:	98 a1       	ldd	r25, Y+32	; 0x20
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	f1 f7       	brne	.-4      	; 0x1ad0 <main+0xcca>
    1ad4:	98 a3       	std	Y+32, r25	; 0x20
    1ad6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad8:	89 a1       	ldd	r24, Y+33	; 0x21
    1ada:	9a a1       	ldd	r25, Y+34	; 0x22
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	9a a3       	std	Y+34, r25	; 0x22
    1ae0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ae4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ae6:	00 97       	sbiw	r24, 0x00	; 0
    1ae8:	69 f7       	brne	.-38     	; 0x1ac4 <main+0xcbe>
    1aea:	14 c0       	rjmp	.+40     	; 0x1b14 <main+0xd0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aec:	6b a1       	ldd	r22, Y+35	; 0x23
    1aee:	7c a1       	ldd	r23, Y+36	; 0x24
    1af0:	8d a1       	ldd	r24, Y+37	; 0x25
    1af2:	9e a1       	ldd	r25, Y+38	; 0x26
    1af4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	9a a3       	std	Y+34, r25	; 0x22
    1afe:	89 a3       	std	Y+33, r24	; 0x21
    1b00:	89 a1       	ldd	r24, Y+33	; 0x21
    1b02:	9a a1       	ldd	r25, Y+34	; 0x22
    1b04:	9e 8f       	std	Y+30, r25	; 0x1e
    1b06:	8d 8f       	std	Y+29, r24	; 0x1d
    1b08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <main+0xd06>
    1b10:	9e 8f       	std	Y+30, r25	; 0x1e
    1b12:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(500);
				divider /= 10;
    1b14:	8e 01       	movw	r16, r28
    1b16:	0a 56       	subi	r16, 0x6A	; 106
    1b18:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	ea 56       	subi	r30, 0x6A	; 106
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	80 81       	ld	r24, Z
    1b22:	91 81       	ldd	r25, Z+1	; 0x01
    1b24:	2a e0       	ldi	r18, 0x0A	; 10
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	b9 01       	movw	r22, r18
    1b2a:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__udivmodhi4>
    1b2e:	cb 01       	movw	r24, r22
    1b30:	f8 01       	movw	r30, r16
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	80 83       	st	Z, r24

    	}

		uint16 divider = 10000;
		if(p_result>=100){
			for(int i=0; i<5; i++){//max result is 5 digits
    1b36:	de 01       	movw	r26, r28
    1b38:	a2 57       	subi	r26, 0x72	; 114
    1b3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	e2 57       	subi	r30, 0x72	; 114
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	80 81       	ld	r24, Z
    1b44:	91 81       	ldd	r25, Z+1	; 0x01
    1b46:	01 96       	adiw	r24, 0x01	; 1
    1b48:	11 96       	adiw	r26, 0x01	; 1
    1b4a:	9c 93       	st	X, r25
    1b4c:	8e 93       	st	-X, r24
    1b4e:	fe 01       	movw	r30, r28
    1b50:	e2 57       	subi	r30, 0x72	; 114
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	80 81       	ld	r24, Z
    1b56:	91 81       	ldd	r25, Z+1	; 0x01
    1b58:	85 30       	cpi	r24, 0x05	; 5
    1b5a:	91 05       	cpc	r25, r1
    1b5c:	0c f4       	brge	.+2      	; 0x1b60 <main+0xd5a>
    1b5e:	53 cf       	rjmp	.-346    	; 0x1a06 <main+0xc00>
    1b60:	78 c0       	rjmp	.+240    	; 0x1c52 <main+0xe4c>
				_delay_ms(500);
				divider /= 10;
			}
		}else{

    		UART_sendByte(p_result);
    1b62:	fe 01       	movw	r30, r28
    1b64:	e8 56       	subi	r30, 0x68	; 104
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	80 81       	ld	r24, Z
    1b6a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <UART_sendByte>
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	aa ef       	ldi	r26, 0xFA	; 250
    1b74:	b3 e4       	ldi	r27, 0x43	; 67
    1b76:	89 8f       	std	Y+25, r24	; 0x19
    1b78:	9a 8f       	std	Y+26, r25	; 0x1a
    1b7a:	ab 8f       	std	Y+27, r26	; 0x1b
    1b7c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b7e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	4a e7       	ldi	r20, 0x7A	; 122
    1b8c:	53 e4       	ldi	r21, 0x43	; 67
    1b8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	8d 8b       	std	Y+21, r24	; 0x15
    1b98:	9e 8b       	std	Y+22, r25	; 0x16
    1b9a:	af 8b       	std	Y+23, r26	; 0x17
    1b9c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e8       	ldi	r20, 0x80	; 128
    1bac:	5f e3       	ldi	r21, 0x3F	; 63
    1bae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bb2:	88 23       	and	r24, r24
    1bb4:	2c f4       	brge	.+10     	; 0x1bc0 <main+0xdba>
		__ticks = 1;
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	9c 8b       	std	Y+20, r25	; 0x14
    1bbc:	8b 8b       	std	Y+19, r24	; 0x13
    1bbe:	3f c0       	rjmp	.+126    	; 0x1c3e <main+0xe38>
	else if (__tmp > 65535)
    1bc0:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc2:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc4:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc6:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	3f ef       	ldi	r19, 0xFF	; 255
    1bcc:	4f e7       	ldi	r20, 0x7F	; 127
    1bce:	57 e4       	ldi	r21, 0x47	; 71
    1bd0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bd4:	18 16       	cp	r1, r24
    1bd6:	4c f5       	brge	.+82     	; 0x1c2a <main+0xe24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd8:	69 8d       	ldd	r22, Y+25	; 0x19
    1bda:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bde:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e2       	ldi	r20, 0x20	; 32
    1be6:	51 e4       	ldi	r21, 0x41	; 65
    1be8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	bc 01       	movw	r22, r24
    1bf2:	cd 01       	movw	r24, r26
    1bf4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	9c 8b       	std	Y+20, r25	; 0x14
    1bfe:	8b 8b       	std	Y+19, r24	; 0x13
    1c00:	0f c0       	rjmp	.+30     	; 0x1c20 <main+0xe1a>
    1c02:	89 e1       	ldi	r24, 0x19	; 25
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	9a 8b       	std	Y+18, r25	; 0x12
    1c08:	89 8b       	std	Y+17, r24	; 0x11
    1c0a:	89 89       	ldd	r24, Y+17	; 0x11
    1c0c:	9a 89       	ldd	r25, Y+18	; 0x12
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <main+0xe08>
    1c12:	9a 8b       	std	Y+18, r25	; 0x12
    1c14:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c16:	8b 89       	ldd	r24, Y+19	; 0x13
    1c18:	9c 89       	ldd	r25, Y+20	; 0x14
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	9c 8b       	std	Y+20, r25	; 0x14
    1c1e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c20:	8b 89       	ldd	r24, Y+19	; 0x13
    1c22:	9c 89       	ldd	r25, Y+20	; 0x14
    1c24:	00 97       	sbiw	r24, 0x00	; 0
    1c26:	69 f7       	brne	.-38     	; 0x1c02 <main+0xdfc>
    1c28:	14 c0       	rjmp	.+40     	; 0x1c52 <main+0xe4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c30:	98 8d       	ldd	r25, Y+24	; 0x18
    1c32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	9c 8b       	std	Y+20, r25	; 0x14
    1c3c:	8b 8b       	std	Y+19, r24	; 0x13
    1c3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c40:	9c 89       	ldd	r25, Y+20	; 0x14
    1c42:	98 8b       	std	Y+16, r25	; 0x10
    1c44:	8f 87       	std	Y+15, r24	; 0x0f
    1c46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c48:	98 89       	ldd	r25, Y+16	; 0x10
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <main+0xe44>
    1c4e:	98 8b       	std	Y+16, r25	; 0x10
    1c50:	8f 87       	std	Y+15, r24	; 0x0f
    		_delay_ms(500);
		}

    	while(1){
    		uint8 key = KeyPad_getPressedKey(); //get the pressed key
    1c52:	0e 94 9b 05 	call	0xb36	; 0xb36 <KeyPad_getPressedKey>
    1c56:	fe 01       	movw	r30, r28
    1c58:	e3 57       	subi	r30, 0x73	; 115
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	80 83       	st	Z, r24
    		if(key == 13){
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e3 57       	subi	r30, 0x73	; 115
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	80 81       	ld	r24, Z
    1c66:	8d 30       	cpi	r24, 0x0D	; 13
    1c68:	a1 f7       	brne	.-24     	; 0x1c52 <main+0xe4c>
    			UART_sendByte(key);
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	e3 57       	subi	r30, 0x73	; 115
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	80 81       	ld	r24, Z
    1c72:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <UART_sendByte>
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	aa ef       	ldi	r26, 0xFA	; 250
    1c7c:	b3 e4       	ldi	r27, 0x43	; 67
    1c7e:	8b 87       	std	Y+11, r24	; 0x0b
    1c80:	9c 87       	std	Y+12, r25	; 0x0c
    1c82:	ad 87       	std	Y+13, r26	; 0x0d
    1c84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	4a e7       	ldi	r20, 0x7A	; 122
    1c94:	53 e4       	ldi	r21, 0x43	; 67
    1c96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	8f 83       	std	Y+7, r24	; 0x07
    1ca0:	98 87       	std	Y+8, r25	; 0x08
    1ca2:	a9 87       	std	Y+9, r26	; 0x09
    1ca4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ca6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca8:	78 85       	ldd	r23, Y+8	; 0x08
    1caa:	89 85       	ldd	r24, Y+9	; 0x09
    1cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	40 e8       	ldi	r20, 0x80	; 128
    1cb4:	5f e3       	ldi	r21, 0x3F	; 63
    1cb6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cba:	88 23       	and	r24, r24
    1cbc:	2c f4       	brge	.+10     	; 0x1cc8 <main+0xec2>
		__ticks = 1;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	9e 83       	std	Y+6, r25	; 0x06
    1cc4:	8d 83       	std	Y+5, r24	; 0x05
    1cc6:	3f c0       	rjmp	.+126    	; 0x1d46 <main+0xf40>
	else if (__tmp > 65535)
    1cc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cca:	78 85       	ldd	r23, Y+8	; 0x08
    1ccc:	89 85       	ldd	r24, Y+9	; 0x09
    1cce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	3f ef       	ldi	r19, 0xFF	; 255
    1cd4:	4f e7       	ldi	r20, 0x7F	; 127
    1cd6:	57 e4       	ldi	r21, 0x47	; 71
    1cd8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cdc:	18 16       	cp	r1, r24
    1cde:	4c f5       	brge	.+82     	; 0x1d32 <main+0xf2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e2       	ldi	r20, 0x20	; 32
    1cee:	51 e4       	ldi	r21, 0x41	; 65
    1cf0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	bc 01       	movw	r22, r24
    1cfa:	cd 01       	movw	r24, r26
    1cfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	9e 83       	std	Y+6, r25	; 0x06
    1d06:	8d 83       	std	Y+5, r24	; 0x05
    1d08:	0f c0       	rjmp	.+30     	; 0x1d28 <main+0xf22>
    1d0a:	89 e1       	ldi	r24, 0x19	; 25
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9c 83       	std	Y+4, r25	; 0x04
    1d10:	8b 83       	std	Y+3, r24	; 0x03
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	9c 81       	ldd	r25, Y+4	; 0x04
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <main+0xf10>
    1d1a:	9c 83       	std	Y+4, r25	; 0x04
    1d1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d20:	9e 81       	ldd	r25, Y+6	; 0x06
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	9e 83       	std	Y+6, r25	; 0x06
    1d26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d28:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	69 f7       	brne	.-38     	; 0x1d0a <main+0xf04>
    1d30:	14 c0       	rjmp	.+40     	; 0x1d5a <main+0xf54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d32:	6f 81       	ldd	r22, Y+7	; 0x07
    1d34:	78 85       	ldd	r23, Y+8	; 0x08
    1d36:	89 85       	ldd	r24, Y+9	; 0x09
    1d38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	9e 83       	std	Y+6, r25	; 0x06
    1d44:	8d 83       	std	Y+5, r24	; 0x05
    1d46:	8d 81       	ldd	r24, Y+5	; 0x05
    1d48:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4a:	9a 83       	std	Y+2, r25	; 0x02
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	9a 81       	ldd	r25, Y+2	; 0x02
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <main+0xf4c>
    1d56:	9a 83       	std	Y+2, r25	; 0x02
    1d58:	89 83       	std	Y+1, r24	; 0x01
    			_delay_ms(500);
    			lhs = 0;
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e1 56       	subi	r30, 0x61	; 97
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	10 82       	st	Z, r1
    			rhs = 0;
    1d62:	fe 01       	movw	r30, r28
    1d64:	e2 56       	subi	r30, 0x62	; 98
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	10 82       	st	Z, r1
    			op = 0;
    1d6a:	fe 01       	movw	r30, r28
    1d6c:	e3 56       	subi	r30, 0x63	; 99
    1d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d70:	10 82       	st	Z, r1
    			eq = 0;
    1d72:	fe 01       	movw	r30, r28
    1d74:	e4 56       	subi	r30, 0x64	; 100
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	10 82       	st	Z, r1
    			result = 0;
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	e6 56       	subi	r30, 0x66	; 102
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	11 82       	std	Z+1, r1	; 0x01
    1d82:	10 82       	st	Z, r1
    1d84:	64 c8       	rjmp	.-3896   	; 0xe4e <main+0x48>

00001d86 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1d8e:	eb e2       	ldi	r30, 0x2B	; 43
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	82 e0       	ldi	r24, 0x02	; 2
    1d94:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1d96:	ea e2       	ldi	r30, 0x2A	; 42
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	88 e1       	ldi	r24, 0x18	; 24
    1d9c:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    1d9e:	e0 e4       	ldi	r30, 0x40	; 64
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	86 e8       	ldi	r24, 0x86	; 134
    1da4:	80 83       	st	Z, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    1da6:	e0 e4       	ldi	r30, 0x40	; 64
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    1dac:	e9 e2       	ldi	r30, 0x29	; 41
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	8c e0       	ldi	r24, 0x0C	; 12
    1db2:	80 83       	st	Z, r24
}
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	0f 92       	push	r0
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1dc6:	eb e2       	ldi	r30, 0x2B	; 43
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	88 2f       	mov	r24, r24
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	80 72       	andi	r24, 0x20	; 32
    1dd2:	90 70       	andi	r25, 0x00	; 0
    1dd4:	00 97       	sbiw	r24, 0x00	; 0
    1dd6:	b9 f3       	breq	.-18     	; 0x1dc6 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    1dd8:	ec e2       	ldi	r30, 0x2C	; 44
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1de0:	0f 90       	pop	r0
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	08 95       	ret

00001de8 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1df0:	eb e2       	ldi	r30, 0x2B	; 43
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	88 23       	and	r24, r24
    1df8:	dc f7       	brge	.-10     	; 0x1df0 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
    1dfa:	ec e2       	ldi	r30, 0x2C	; 44
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
}
    1e00:	cf 91       	pop	r28
    1e02:	df 91       	pop	r29
    1e04:	08 95       	ret

00001e06 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	00 d0       	rcall	.+0      	; 0x1e0c <UART_sendString+0x6>
    1e0c:	0f 92       	push	r0
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
    1e12:	9b 83       	std	Y+3, r25	; 0x03
    1e14:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e16:	19 82       	std	Y+1, r1	; 0x01
    1e18:	0e c0       	rjmp	.+28     	; 0x1e36 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	28 2f       	mov	r18, r24
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	9b 81       	ldd	r25, Y+3	; 0x03
    1e24:	fc 01       	movw	r30, r24
    1e26:	e2 0f       	add	r30, r18
    1e28:	f3 1f       	adc	r31, r19
    1e2a:	80 81       	ld	r24, Z
    1e2c:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <UART_sendByte>
		i++;
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	8f 5f       	subi	r24, 0xFF	; 255
    1e34:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e40:	fc 01       	movw	r30, r24
    1e42:	e2 0f       	add	r30, r18
    1e44:	f3 1f       	adc	r31, r19
    1e46:	80 81       	ld	r24, Z
    1e48:	88 23       	and	r24, r24
    1e4a:	39 f7       	brne	.-50     	; 0x1e1a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    1e58:	0f 93       	push	r16
    1e5a:	1f 93       	push	r17
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	00 d0       	rcall	.+0      	; 0x1e62 <UART_receiveString+0xa>
    1e62:	0f 92       	push	r0
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	9b 83       	std	Y+3, r25	; 0x03
    1e6a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e6c:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	28 2f       	mov	r18, r24
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	9b 81       	ldd	r25, Y+3	; 0x03
    1e78:	8c 01       	movw	r16, r24
    1e7a:	02 0f       	add	r16, r18
    1e7c:	13 1f       	adc	r17, r19
    1e7e:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <UART_recieveByte>
    1e82:	f8 01       	movw	r30, r16
    1e84:	80 83       	st	Z, r24
    1e86:	0f c0       	rjmp	.+30     	; 0x1ea6 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	8f 5f       	subi	r24, 0xFF	; 255
    1e8c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	9b 81       	ldd	r25, Y+3	; 0x03
    1e98:	8c 01       	movw	r16, r24
    1e9a:	02 0f       	add	r16, r18
    1e9c:	13 1f       	adc	r17, r19
    1e9e:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <UART_recieveByte>
    1ea2:	f8 01       	movw	r30, r16
    1ea4:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	e2 0f       	add	r30, r18
    1eb4:	f3 1f       	adc	r31, r19
    1eb6:	80 81       	ld	r24, Z
    1eb8:	83 32       	cpi	r24, 0x23	; 35
    1eba:	31 f7       	brne	.-52     	; 0x1e88 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	e2 0f       	add	r30, r18
    1eca:	f3 1f       	adc	r31, r19
    1ecc:	10 82       	st	Z, r1
}
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	1f 91       	pop	r17
    1eda:	0f 91       	pop	r16
    1edc:	08 95       	ret

00001ede <__udivmodqi4>:
    1ede:	99 1b       	sub	r25, r25
    1ee0:	79 e0       	ldi	r23, 0x09	; 9
    1ee2:	04 c0       	rjmp	.+8      	; 0x1eec <__udivmodqi4_ep>

00001ee4 <__udivmodqi4_loop>:
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	96 17       	cp	r25, r22
    1ee8:	08 f0       	brcs	.+2      	; 0x1eec <__udivmodqi4_ep>
    1eea:	96 1b       	sub	r25, r22

00001eec <__udivmodqi4_ep>:
    1eec:	88 1f       	adc	r24, r24
    1eee:	7a 95       	dec	r23
    1ef0:	c9 f7       	brne	.-14     	; 0x1ee4 <__udivmodqi4_loop>
    1ef2:	80 95       	com	r24
    1ef4:	08 95       	ret

00001ef6 <__udivmodhi4>:
    1ef6:	aa 1b       	sub	r26, r26
    1ef8:	bb 1b       	sub	r27, r27
    1efa:	51 e1       	ldi	r21, 0x11	; 17
    1efc:	07 c0       	rjmp	.+14     	; 0x1f0c <__udivmodhi4_ep>

00001efe <__udivmodhi4_loop>:
    1efe:	aa 1f       	adc	r26, r26
    1f00:	bb 1f       	adc	r27, r27
    1f02:	a6 17       	cp	r26, r22
    1f04:	b7 07       	cpc	r27, r23
    1f06:	10 f0       	brcs	.+4      	; 0x1f0c <__udivmodhi4_ep>
    1f08:	a6 1b       	sub	r26, r22
    1f0a:	b7 0b       	sbc	r27, r23

00001f0c <__udivmodhi4_ep>:
    1f0c:	88 1f       	adc	r24, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	5a 95       	dec	r21
    1f12:	a9 f7       	brne	.-22     	; 0x1efe <__udivmodhi4_loop>
    1f14:	80 95       	com	r24
    1f16:	90 95       	com	r25
    1f18:	bc 01       	movw	r22, r24
    1f1a:	cd 01       	movw	r24, r26
    1f1c:	08 95       	ret

00001f1e <__prologue_saves__>:
    1f1e:	2f 92       	push	r2
    1f20:	3f 92       	push	r3
    1f22:	4f 92       	push	r4
    1f24:	5f 92       	push	r5
    1f26:	6f 92       	push	r6
    1f28:	7f 92       	push	r7
    1f2a:	8f 92       	push	r8
    1f2c:	9f 92       	push	r9
    1f2e:	af 92       	push	r10
    1f30:	bf 92       	push	r11
    1f32:	cf 92       	push	r12
    1f34:	df 92       	push	r13
    1f36:	ef 92       	push	r14
    1f38:	ff 92       	push	r15
    1f3a:	0f 93       	push	r16
    1f3c:	1f 93       	push	r17
    1f3e:	cf 93       	push	r28
    1f40:	df 93       	push	r29
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	ca 1b       	sub	r28, r26
    1f48:	db 0b       	sbc	r29, r27
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	f8 94       	cli
    1f4e:	de bf       	out	0x3e, r29	; 62
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	09 94       	ijmp

00001f56 <__epilogue_restores__>:
    1f56:	2a 88       	ldd	r2, Y+18	; 0x12
    1f58:	39 88       	ldd	r3, Y+17	; 0x11
    1f5a:	48 88       	ldd	r4, Y+16	; 0x10
    1f5c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f5e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f60:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f62:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f64:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f66:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f68:	b9 84       	ldd	r11, Y+9	; 0x09
    1f6a:	c8 84       	ldd	r12, Y+8	; 0x08
    1f6c:	df 80       	ldd	r13, Y+7	; 0x07
    1f6e:	ee 80       	ldd	r14, Y+6	; 0x06
    1f70:	fd 80       	ldd	r15, Y+5	; 0x05
    1f72:	0c 81       	ldd	r16, Y+4	; 0x04
    1f74:	1b 81       	ldd	r17, Y+3	; 0x03
    1f76:	aa 81       	ldd	r26, Y+2	; 0x02
    1f78:	b9 81       	ldd	r27, Y+1	; 0x01
    1f7a:	ce 0f       	add	r28, r30
    1f7c:	d1 1d       	adc	r29, r1
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	de bf       	out	0x3e, r29	; 62
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	cd bf       	out	0x3d, r28	; 61
    1f88:	ed 01       	movw	r28, r26
    1f8a:	08 95       	ret

00001f8c <_exit>:
    1f8c:	f8 94       	cli

00001f8e <__stop_program>:
    1f8e:	ff cf       	rjmp	.-2      	; 0x1f8e <__stop_program>
